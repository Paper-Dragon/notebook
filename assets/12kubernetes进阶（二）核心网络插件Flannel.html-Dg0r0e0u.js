import{a as s,c as n,g as a,o as i}from"./app-CRDN5Xxg.js";const l="/assets/1034759-20191121200002239-1697140830-16918406153101-Bzse0b_B.png",t="/assets/1034759-20191121200204515-28730350-16918406177283-BF4dYcor.png",r="/assets/1034759-20191122171159049-940681065-16918406193805-CgljqQix.png",d="/assets/1034759-20191122164953811-143530436-16918406226847-2yilGal4.png",p={};function c(o,e){return i(),n("div",null,[...e[0]||(e[0]=[a(`<h1 id="kubernetes进阶-二-核心网络插件flannel" tabindex="-1"><a class="header-anchor" href="#kubernetes进阶-二-核心网络插件flannel"><span>kubernetes进阶（二）核心网络插件Flannel</span></a></h1><p><strong>网络插件Flannel介绍：https://www.kubernetes.org.cn/3682.html</strong></p><p>首先，flannel利用Kubernetes API或者etcd用于存储整个集群的网络配置，其中最主要的内容为设置集群的网络地址空间。例如，设定整个集群内所有容器的IP都取自网段“10.1.0.0/16”。</p><p>接着，flannel在每个主机中运行flanneld作为agent，它会为所在主机从集群的网络地址空间中，获取一个小的网段subnet，本主机内所有容器的IP地址都将从中分配。</p><p>然后，flanneld再将本主机获取的subnet以及用于主机间通信的Public IP，同样通过kubernetes API或者etcd存储起来。</p><p>最后，flannel利用各种backend mechanism，例如udp，vxlan等等，跨主机转发容器间的网络流量，完成容器间的跨主机通信。</p><h2 id="一、下载flannel插件" tabindex="-1"><a class="header-anchor" href="#一、下载flannel插件"><span>一、下载flannel插件</span></a></h2><p>在所有node节点安装flannel插件，本次环境在hdss7-21，hdss7-22上：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># cd /opt/src</span></span>
<span class="line"><span># wget https://github.com/coreos/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gz</span></span>
<span class="line"><span># mkdir /opt/flannel-v0.11.0</span></span>
<span class="line"><span># tar xf flannel-v0.11.0-linux-amd64.tar.gz -C /opt/flannel-v0.11.0/</span></span>
<span class="line"><span># ln -s /opt/flannel-v0.11.0/ /opt/flannel</span></span>
<span class="line"><span># cd /opt/flannel</span></span>
<span class="line"><span># mkdir cert</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为要和apiserver通信，所以要配置client证书：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>cert]# scp hdss7-200:/opt/certs/ca.pem . </span></span>
<span class="line"><span></span></span>
<span class="line"><span>cert]# scp hdss7-200:/opt/certs/client.pem .</span></span>
<span class="line"><span></span></span>
<span class="line"><span>cert]# scp hdss7-200:/opt/certs/client-key.pem .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编辑环境变量env文件：红色部分根据node节点信息修改</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># vi subnet.env</span></span>
<span class="line"><span></span></span>
<span class="line"><span>FLANNEL_NETWORK=172.7.0.0/16</span></span>
<span class="line"><span>FLANNEL_SUBNET=172.7.21.1/24</span></span>
<span class="line"><span>FLANNEL_MTU=1500</span></span>
<span class="line"><span>FLANNEL_IPMASQ=false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编辑启动脚本：红色部分根据node节点信息修改，并且eth0信息根据本机网卡信息修改</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># vi flanneld.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>#!/bin/sh</span></span>
<span class="line"><span>./flanneld \\</span></span>
<span class="line"><span>  --public-ip=10.4.7.21 \\</span></span>
<span class="line"><span>  --etcd-endpoints=https://10.4.7.12:2379,https://10.4.7.21:2379,https://10.4.7.22:2379 \\</span></span>
<span class="line"><span>  --etcd-keyfile=./cert/client-key.pem \\</span></span>
<span class="line"><span>  --etcd-certfile=./cert/client.pem \\</span></span>
<span class="line"><span>  --etcd-cafile=./cert/ca.pem \\</span></span>
<span class="line"><span>  --iface=eth0 \\</span></span>
<span class="line"><span>  --subnet-file=./subnet.env \\</span></span>
<span class="line"><span>  --healthz-port=2401</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># chmod u+x flanneld.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建日志存放目录：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># mkdir -p /data/logs/flanneld</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在etcd中增加网络配置信息：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># cd /opt/etcd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>测试使用 host-gw模型：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># ./etcdctl set /coreos.com/network/config &#39;{&quot;Network&quot;: &quot;172.7.0.0/16&quot;, &quot;Backend&quot;: {&quot;Type&quot;: &quot;host-gw&quot;}}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看网络模型配置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># ./etcdctl get /coreos.com/network/config</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+l+`" alt="img"></p><p>编辑supervisor启动脚本：红色部分记得修改</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># vi /etc/supervisord.d/flannel.ini</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>[program:flanneld-7-21]</span></span>
<span class="line"><span>command=/opt/flannel/flanneld.sh                             ; the program (relative uses PATH, can take args)</span></span>
<span class="line"><span>numprocs=1                                                   ; number of processes copies to start (def 1)</span></span>
<span class="line"><span>directory=/opt/flannel                                       ; directory to cwd to before exec (def no cwd)</span></span>
<span class="line"><span>autostart=true                                               ; start at supervisord start (default: true)</span></span>
<span class="line"><span>autorestart=true                                             ; retstart at unexpected quit (default: true)</span></span>
<span class="line"><span>startsecs=30                                                 ; number of secs prog must stay running (def. 1)</span></span>
<span class="line"><span>startretries=3                                               ; max # of serial start failures (default 3)</span></span>
<span class="line"><span>exitcodes=0,2                                                ; &#39;expected&#39; exit codes for process (default 0,2)</span></span>
<span class="line"><span>stopsignal=QUIT                                              ; signal used to kill process (default TERM)</span></span>
<span class="line"><span>stopwaitsecs=10                                              ; max num secs to wait b4 SIGKILL (default 10)</span></span>
<span class="line"><span>user=root                                                    ; setuid to this UNIX account to run the program</span></span>
<span class="line"><span>redirect_stderr=true                                         ; redirect proc stderr to stdout (default false)</span></span>
<span class="line"><span>stdout_logfile=/data/logs/flanneld/flanneld.stdout.log       ; stderr log path, NONE for none; default AUTO</span></span>
<span class="line"><span>stdout_logfile_maxbytes=64MB                                 ; max # logfile bytes b4 rotation (default 50MB)</span></span>
<span class="line"><span>stdout_logfile_backups=4                                     ; # of stdout logfile backups (default 10)</span></span>
<span class="line"><span>stdout_capture_maxbytes=1MB                                  ; number of bytes in &#39;capturemode&#39; (default 0)</span></span>
<span class="line"><span>stdout_events_enabled=false                                  ; emit events on stdout writes (default false)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新supervisor配置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># supervisorctl update</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+t+`" alt="img"></p><p><strong>这里需要修改iptables优化SNAT规则，否则在访问时，其他节点记录的是node节点的ip 10.4.7.21，而不是pod集群内部的172.7.21.x，红色部分按需修改</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># yum install iptables-services -y</span></span>
<span class="line"><span># iptables -t nat -D POSTROUTING -s 172.7.21.0/24 ! -o docker0 -j MASQUERADE</span></span>
<span class="line"><span># iptables -t nat -I POSTROUTING -s 172.7.21.0/24 ! -d 172.7.0.0/16 ! -o docker0 -j MASQUERADE</span></span>
<span class="line"><span># iptables-save |grep -i postrouting</span></span>
<span class="line"><span># iptables-save &gt; /etc/sysconfig/iptables</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改后会影响到docker原本的iptables链的规则，所以需要重启docker服务</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># systemctl restart docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>配置vxlan模型：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># cd /opt/etcd</span></span>
<span class="line"><span># ./etcdctl set /coreos.com/network/config  &#39;{&quot;Network&quot;: &quot;172.7.0.0/16&quot;, &quot;Backend&quot;: {&quot;Type&quot;: &quot;vxlan&quot;}}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>重启flanneld：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># supervisorctl restart flanneld-7-21</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以发现多了一块网卡，这块网卡就是vxlan用于隧道通信的虚拟网卡：</p><p><img src="`+r+'" alt="img"></p><p>配置vxlan跟host-gw混合模型：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># ./etcdctl set /coreos.com/network/config  &#39;{&quot;Network&quot;: &quot;172.7.0.0/16&quot;, &quot;Backend&quot;: {&quot;Type&quot;: &quot;vxlan&quot;,&quot;Directrouting&quot;: true}}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>重启flanneld：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># supervisorctl restart flanneld-7-21</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+d+'" alt="img"></p>',47)])])}const u=s(p,[["render",c]]),g=JSON.parse('{"path":"/note-book/Kubernetes/12kubernetes%E8%BF%9B%E9%98%B6%EF%BC%88%E4%BA%8C%EF%BC%89%E6%A0%B8%E5%BF%83%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6Flannel.html","title":"kubernetes进阶（二）核心网络插件Flannel","lang":"zh-CN","frontmatter":{"description":"kubernetes进阶（二）核心网络插件Flannel 网络插件Flannel介绍：https://www.kubernetes.org.cn/3682.html 首先，flannel利用Kubernetes API或者etcd用于存储整个集群的网络配置，其中最主要的内容为设置集群的网络地址空间。例如，设定整个集群内所有容器的IP都取自网段“10.1...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"kubernetes进阶（二）核心网络插件Flannel\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-07T08:15:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paper-Dragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://www.geekery.cn/note-book/Kubernetes/12kubernetes%E8%BF%9B%E9%98%B6%EF%BC%88%E4%BA%8C%EF%BC%89%E6%A0%B8%E5%BF%83%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6Flannel.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"kubernetes进阶（二）核心网络插件Flannel"}],["meta",{"property":"og:description","content":"kubernetes进阶（二）核心网络插件Flannel 网络插件Flannel介绍：https://www.kubernetes.org.cn/3682.html 首先，flannel利用Kubernetes API或者etcd用于存储整个集群的网络配置，其中最主要的内容为设置集群的网络地址空间。例如，设定整个集群内所有容器的IP都取自网段“10.1..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-07T08:15:04.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-07T08:15:04.000Z"}]]},"git":{"createdTime":1691939318000,"updatedTime":1709799304000,"contributors":[{"name":"Paper-Dragon","username":"Paper-Dragon","email":"2678885646@qq.com","commits":1,"url":"https://github.com/Paper-Dragon"},{"name":"PaperDragon-SH","username":"PaperDragon-SH","email":"2678885646@qq.com","commits":2,"url":"https://github.com/PaperDragon-SH"}],"changelog":[{"hash":"d9487231a8c7ade839488b74acab413e440a9cab","time":1709799304000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"sort"},{"hash":"d9455ca5860599305d67fa737031b3d66113f6b4","time":1709795610000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"kubernetes进阶（二）核心网络插件Flannel"},{"hash":"392a519398b2e846f316619fbe831e100164de7c","time":1691939318000,"email":"2678885646@qq.com","author":"Paper-Dragon","message":"Create The Worid!"}]},"readingTime":{"minutes":3.04,"words":913},"filePathRelative":"note-book/Kubernetes/12kubernetes进阶（二）核心网络插件Flannel.md","excerpt":"\\n<p><strong>网络插件Flannel介绍：https://www.kubernetes.org.cn/3682.html</strong></p>\\n<p>首先，flannel利用Kubernetes API或者etcd用于存储整个集群的网络配置，其中最主要的内容为设置集群的网络地址空间。例如，设定整个集群内所有容器的IP都取自网段“10.1.0.0/16”。</p>\\n<p>接着，flannel在每个主机中运行flanneld作为agent，它会为所在主机从集群的网络地址空间中，获取一个小的网段subnet，本主机内所有容器的IP地址都将从中分配。</p>\\n<p>然后，flanneld再将本主机获取的subnet以及用于主机间通信的Public IP，同样通过kubernetes API或者etcd存储起来。</p>","autoDesc":true}');export{u as comp,g as data};
