import{aq as s,ar as n,aw as a,av as i}from"./app-BNAzFuJ6.js";const l="/assets/530_0105180415_f02ton5e4it-BTPNOcs3.jpg",o="/assets/531_0105180415_ujfducawlcq-BnrLWzYV.jpg",r={};function c(p,e){return i(),n("div",null,e[0]||(e[0]=[a(`<h1 id="docker环境清理" tabindex="-1"><a class="header-anchor" href="#docker环境清理"><span>Docker环境清理</span></a></h1><p><strong>开始清理，需要慎重！</strong></p><p>列出无用的卷</p><blockquote><p>docker volume ls -qf dangling=true</p></blockquote><p>清理无用的卷</p><blockquote><p>docker volume rm $(docker volume ls -qf dangling=true)</p></blockquote><p>清理无用的镜像</p><blockquote><p>docker rmi $(docker images | grep &#39;^&lt;none&gt;&#39; | awk &#39;{print $3}&#39;)</p></blockquote><p>继续清理</p><blockquote><p>docker system prune</p><p>docker volume prune</p></blockquote><p>以上足够使用，其他命令不要知道了！</p><p>**补充知识：**<strong>Docker 一文教你清理docker空间释放磁盘空间</strong></p><p><strong>如何清理docker目录</strong></p><p>docker 目录已经占满系统盘，又不好迁移，问下有没有快捷的解决方案，答案是有的。以下是我整理的经典案列，适合生产以及测试使用。编写清理docker 日志脚本如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@www ~]# cat clean_docker_log_space.log </span></span>
<span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span>docker_log_files=$(find /var/lib/docker/containers/ -name &#39;*-json.log&#39;)</span></span>
<span class="line"><span>docker_logs_size=$(find /var/lib/docker/containers/ -name &#39;*-json.log&#39; | xargs du -sc | tail -1 |awk &#39;{print $1,&quot;K&quot;}&#39;)</span></span>
<span class="line"><span>free -h &amp;&amp; sync &amp;&amp; echo 1 &gt; /proc/sys/vm/drop_caches  #释放系统缓存</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>echo -e &quot;\\033[32mThe docker log total size is $docker_logs_size\\033[0m&quot;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>for log in $docker_log_files</span></span>
<span class="line"><span>  do</span></span>
<span class="line"><span>   echo &quot;Now is cleaning docker log,docker core logs:$log&quot;</span></span>
<span class="line"><span>    cat /dev/null &gt; $log</span></span>
<span class="line"><span>    systemctl reload docker #加载docker服务，不影响已经docker</span></span>
<span class="line"><span>  done </span></span>
<span class="line"><span> </span></span>
<span class="line"><span>free -h</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@www ~]# ./clean_docker_log_space.log </span></span>
<span class="line"><span>       total    used    free   shared buff/cache  available</span></span>
<span class="line"><span>Mem:      976M    598M    112M    6.8M    264M    157M</span></span>
<span class="line"><span>Swap:     511M     66M    445M</span></span>
<span class="line"><span>The docker log total size is 80 K</span></span>
<span class="line"><span>Now is cleaning docker log,docker core logs:/var/lib/docker/containers/7538f077348e3c9722fb90ed4b0a5c3d60d72112e989526767c63d55f5a76f3e/7538f077348e3c9722fb90ed4b0a5c3d60d72112e989526767c63d55f5a76f3e-json.log</span></span>
<span class="line"><span>Now is cleaning docker log,docker core logs:/var/lib/docker/containers/235d20190027e757a203f1b4d4093335fb92ba515f7a501448c36c1332c622a2/235d20190027e757a203f1b4d4093335fb92ba515f7a501448c36c1332c622a2-json.log</span></span>
<span class="line"><span>Now is cleaning docker log,docker core logs:/var/lib/docker/containers/685a7af447ce884de1e9bbeb5d4ca0ca99860096f71c33b4f9a4d15a427c5e00/685a7af447ce884de1e9bbeb5d4ca0ca99860096f71c33b4f9a4d15a427c5e00-json.log</span></span>
<span class="line"><span>       total    used    free   shared buff/cache  available</span></span>
<span class="line"><span>Mem:      976M    599M    176M    6.8M    200M    168M</span></span>
<span class="line"><span>Swap:     511M     66M    445M</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>[root@www ~]# find /var/lib/docker/containers/ -name &#39;*-json.log&#39; | xargs du -sc | tail -1 |awk &#39;{print $1,&quot;K&quot;}&#39;</span></span>
<span class="line"><span>0 K</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议把脚本加Linux 定时任务里面每周清理一次，这个就可以保证docker 不产生而外的日志文件。</p><p><strong>生产环境如下所示</strong></p><p>df -TH docker 使用系统磁盘的93%</p><p><img src="`+l+'" alt="img"></p><p>执行脚本 clean_docker_log_space.log ，执行清理脚本之后df -TH，docker 使用系统磁盘的43%</p><p><img src="'+o+`" alt="img"></p><p><strong>docker部署建议</strong></p><p>最后建议大家在部署docker 的应用建议在docker自定义配置目录</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#首先，挂载容量的磁盘，挂载目录选择/data</span></span>
<span class="line"><span>[root@www ~]# mkdir -p /data</span></span>
<span class="line"><span>#停止docker</span></span>
<span class="line"><span>[root@www ~]# systemctl stop docker</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#将数据移到新目录</span></span>
<span class="line"><span>[root@www ~]# mv /var/lib/docker /data</span></span>
<span class="line"><span>#修改配置,增加 --graph /data</span></span>
<span class="line"><span>[root@www ~]# vim /usr/lib/systemd/system/docker.service</span></span>
<span class="line"><span>ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --graph /data </span></span>
<span class="line"><span> </span></span>
<span class="line"><span>[root@www ~]# systemctl daemon-reload</span></span>
<span class="line"><span>[root@www ~]# systemctl start docker </span></span>
<span class="line"><span>[root@www ~]# systemctl enable docker.service </span></span>
<span class="line"><span>Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26)]))}const t=s(r,[["render",c],["__file","Docker环境清理.html.vue"]]),m=JSON.parse(`{"path":"/note-book/Docker/Docker%E7%8E%AF%E5%A2%83%E6%B8%85%E7%90%86.html","title":"Docker环境清理","lang":"zh-CN","frontmatter":{"description":"Docker环境清理 开始清理，需要慎重！ 列出无用的卷 docker volume ls -qf dangling=true 清理无用的卷 docker volume rm $(docker volume ls -qf dangling=true) 清理无用的镜像 docker rmi $(docker images | grep '^<none>'...","head":[["meta",{"property":"og:url","content":"https://www.geekery.cn/note-book/Docker/Docker%E7%8E%AF%E5%A2%83%E6%B8%85%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"Docker环境清理"}],["meta",{"property":"og:description","content":"Docker环境清理 开始清理，需要慎重！ 列出无用的卷 docker volume ls -qf dangling=true 清理无用的卷 docker volume rm $(docker volume ls -qf dangling=true) 清理无用的镜像 docker rmi $(docker images | grep '^<none>'..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-17T03:28:49.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-17T03:28:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker环境清理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-17T03:28:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"PaperDragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"]]},"git":{"createdTime":1691939318000,"updatedTime":1718594929000,"contributors":[{"name":"PaperDragon","username":"PaperDragon","email":"2678885646@qq.com","commits":1,"url":"https://github.com/PaperDragon"},{"name":"PaperDragon-SH","username":"PaperDragon-SH","email":"2678885646@qq.com","commits":2,"url":"https://github.com/PaperDragon-SH"}]},"readingTime":{"minutes":1.84,"words":551},"filePathRelative":"note-book/Docker/Docker环境清理.md","localizedDate":"2023年8月13日","excerpt":"\\n<p><strong>开始清理，需要慎重！</strong></p>\\n<p>列出无用的卷</p>\\n<blockquote>\\n<p>docker volume ls -qf dangling=true</p>\\n</blockquote>\\n<p>清理无用的卷</p>\\n<blockquote>\\n<p>docker volume rm $(docker volume ls -qf dangling=true)</p>\\n</blockquote>\\n<p>清理无用的镜像</p>\\n<blockquote>\\n<p>docker rmi $(docker images | grep '^&lt;none&gt;' | awk '{print $3}')</p>\\n</blockquote>","autoDesc":true}`);export{t as comp,m as data};
