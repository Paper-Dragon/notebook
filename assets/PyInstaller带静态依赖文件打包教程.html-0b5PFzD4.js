import{ah as i,ai as a,ar as n,am as e}from"./app-B-U9xqs6.js";const t={};function l(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="pyinstaller-带静态依赖文件打包教程" tabindex="-1"><a class="header-anchor" href="#pyinstaller-带静态依赖文件打包教程"><span>PyInstaller 带静态依赖文件打包教程</span></a></h1><h2 id="方法一-通过命令行参数" tabindex="-1"><a class="header-anchor" href="#方法一-通过命令行参数"><span>方法一：通过命令行参数</span></a></h2><pre><code>--add-data &quot;欲打包的源文件路径（可以是相对路径，也可以是绝对路径）;.（打包后对应的程序内的路径，一个.代表打包至程序运行时根目录）&quot;

--add-data 参数 可以多次使用，注意格式为引号里面有一个文件名，有一个分号，一个点。

例： pyinstaller -F --add-data &#39;.\\32x32.ico;.&#39; &#39;.\\main.py&#39;
</code></pre><h2 id="方法二-通过修改-spec-打包配置脚本文件" tabindex="-1"><a class="header-anchor" href="#方法二-通过修改-spec-打包配置脚本文件"><span>方法二：通过修改 spec 打包配置脚本文件</span></a></h2><h3 id="通过命令生成-spec-文件" tabindex="-1"><a class="header-anchor" href="#通过命令生成-spec-文件"><span>通过命令生成 spec 文件</span></a></h3><h4 id="onefolder-单文件夹模式" tabindex="-1"><a class="header-anchor" href="#onefolder-单文件夹模式"><span>OneFolder 单文件夹模式</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pyi-makespec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filename</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># pyi-makespec 后跟欲打包python文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="onefile-单文件文件" tabindex="-1"><a class="header-anchor" href="#onefile-单文件文件"><span>OneFile 单文件文件</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pyi-makespec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -F</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filename</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 与pyinstaller 打包单文件相同，均使用 -F 参数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># pyi-makespec -F 后跟欲打包python文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="修改生成的-spec-文件" tabindex="-1"><a class="header-anchor" href="#修改生成的-spec-文件"><span>修改生成的 spec 文件</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -*- mode: python ; coding: utf-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">block_cipher</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> None</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Analysis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;main.py&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">             pathex</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">             binaries</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">             datas</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">             hiddenimports</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">             hookspath</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">             runtime_hooks</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">             excludes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">             win_no_prefer_redirects</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">False,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">             win_private_assemblies</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">False,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">             cipher</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">block_cipher,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">             noarchive</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">False</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在 a 中 datas 列表内添加如下格式配置项</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (&#39;欲打包的源文件路径（相对、绝对均可）&#39;, &#39;.（打包后对应的程序内的路径，一个.代表打包至程序运行时根目录）&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 例如：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 	a = Analysis([&#39;main.py&#39;],</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#		pathex=[],</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#    	binaries=[],</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#       datas=[(&#39;.\\\\excel.ico&#39;, &#39;.&#39;)],</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#       hiddenimports=[],</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#       hookspath=[],</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#       runtime_hooks=[],</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#       excludes=[],</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#       win_no_prefer_redirects=False,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#       win_private_assemblies=False,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#       cipher=block_cipher,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#       noarchive=False)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意：路径中需要用 双反斜杠！！</p><h3 id="使用该-spec-文件打包" tabindex="-1"><a class="header-anchor" href="#使用该-spec-文件打包"><span>使用该 spec 文件打包</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pyinstaller</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ***</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.spec</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="调用方法" tabindex="-1"><a class="header-anchor" href="#调用方法"><span>调用方法</span></a></h2><h4 id="不能在代码中直接使用相对路径调用文件" tabindex="-1"><a class="header-anchor" href="#不能在代码中直接使用相对路径调用文件"><span>不能在代码中直接使用相对路径调用文件</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 先获取当前运行时临时目录路径</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getattr(sys,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;frozen&#39;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    basedir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sys._MEIPASS</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">else:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    basedir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> path.dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">__file__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用 os.path.join() 方法，将 临时目录路径与文件相对路径拼接</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">path.join(basedir,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;file.txt&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;r&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) as fp:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    pass</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="备注" tabindex="-1"><a class="header-anchor" href="#备注"><span>备注：</span></a></h4><pre><code>单文件模式下，运行可执行文件时，程序会先将可执行文件进行解压缩，解压缩的位置在 /temp目录 下，再执行，所以被打包进去的数据文件在被解压的路径下，而，程序是在运行的路径下搜索，即可执行文件的目录下，所以找不到数据文件
</code></pre>`,19)]))}const k=i(t,[["render",l]]),r=JSON.parse(`{"path":"/note-book/Research_Develop/Python/PyInstaller%E5%B8%A6%E9%9D%99%E6%80%81%E4%BE%9D%E8%B5%96%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85%E6%95%99%E7%A8%8B.html","title":"PyInstaller 带静态依赖文件打包教程","lang":"zh-CN","frontmatter":{"description":"PyInstaller 带静态依赖文件打包教程 方法一：通过命令行参数 方法二：通过修改 spec 打包配置脚本文件 通过命令生成 spec 文件 OneFolder 单文件夹模式 OneFile 单文件文件 修改生成的 spec 文件 注意：路径中需要用 双反斜杠！！ 使用该 spec 文件打包 调用方法 不能在代码中直接使用相对路径调用文件 备注：","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PyInstaller 带静态依赖文件打包教程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T07:56:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paper-Dragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://www.geekery.cn/note-book/Research_Develop/Python/PyInstaller%E5%B8%A6%E9%9D%99%E6%80%81%E4%BE%9D%E8%B5%96%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85%E6%95%99%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"PyInstaller 带静态依赖文件打包教程"}],["meta",{"property":"og:description","content":"PyInstaller 带静态依赖文件打包教程 方法一：通过命令行参数 方法二：通过修改 spec 打包配置脚本文件 通过命令生成 spec 文件 OneFolder 单文件夹模式 OneFile 单文件文件 修改生成的 spec 文件 注意：路径中需要用 双反斜杠！！ 使用该 spec 文件打包 调用方法 不能在代码中直接使用相对路径调用文件 备注："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T07:56:45.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-19T07:56:45.000Z"}]]},"git":{"createdTime":1698482265000,"updatedTime":1710835005000,"contributors":[{"name":"Paper-Dragon","username":"Paper-Dragon","email":"2678885646@qq.com","commits":1,"url":"https://github.com/Paper-Dragon"},{"name":"PaperDragon-SH","username":"PaperDragon-SH","email":"2678885646@qq.com","commits":1,"url":"https://github.com/PaperDragon-SH"}],"changelog":[{"hash":"cb0daa33b6329eb21784aa12ccdc214113fb2885","time":1710835005000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"c"},{"hash":"fd554e86a03bb1e41fb436a4900ce44ac041c5d6","time":1698482265000,"email":"2678885646@qq.com","author":"Paper-Dragon","message":"PyInstaller带静态依赖文件打包教程.md"}]},"readingTime":{"minutes":1.73,"words":518},"filePathRelative":"note-book/Research_Develop/Python/PyInstaller带静态依赖文件打包教程.md","excerpt":"\\n<h2>方法一：通过命令行参数</h2>\\n<pre><code>--add-data \\"欲打包的源文件路径（可以是相对路径，也可以是绝对路径）;.（打包后对应的程序内的路径，一个.代表打包至程序运行时根目录）\\"\\n\\n--add-data 参数 可以多次使用，注意格式为引号里面有一个文件名，有一个分号，一个点。\\n\\n例： pyinstaller -F --add-data '.\\\\32x32.ico;.' '.\\\\main.py'\\n</code></pre>\\n<h2>方法二：通过修改 spec 打包配置脚本文件</h2>\\n<h3>通过命令生成 spec 文件</h3>\\n<h4>OneFolder 单文件夹模式</h4>","autoDesc":true}`);export{k as comp,r as data};
