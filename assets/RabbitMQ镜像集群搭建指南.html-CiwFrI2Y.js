import{ah as s,ai as a,ar as e,am as n}from"./app-C9yoftjo.js";const t="/assets/eb1693c6ba6195194b3876201a0b5a48-fkbdXlzO.png",l="/assets/c154353fa9831ef471e7db7d6d6efdaf-CbMI5eZn.png",h="/assets/0d4718d53ddd4e8b040c6ac4ed19ce31-ge5yhukN.png",r="/assets/c8607b9f1b97974c0682777155da3994-BlHS5WIQ.png",b="/assets/80b6da7e27adf700b1de1d8f519295cb-e_oLH3Tw.png",d={};function p(k,i){return n(),a("div",null,i[0]||(i[0]=[e('<h1 id="rabbitmq镜像集群搭建指南" tabindex="-1"><a class="header-anchor" href="#rabbitmq镜像集群搭建指南"><span>RabbitMQ镜像集群搭建指南</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>RabbitMQ是一个开源的消息代理和队列服务器，提供多种传输协议，如AMQP 0-9-1，MQTT，STOMP等。当需要构建高可用和高吞吐量的系统时，RabbitMQ的集群功能变得尤为重要。本文档将指导你如何在三台服务器上设置RabbitMQ镜像集群。</p><p>这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的 queue，无论元数据还是 queue 里的消息都会存在于多个实例上，就是说，每个 RabbitMQ 节点都有这个 queue 的一个完整镜像，包含 queue 的全部数据的意思。然后每次你写消息到 queue 的时候，都会自动把消息同步到多个实例的 queue 上。</p><h2 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h2><p>采用3节点rabbit1、rabbit2、rabbit3进行搭建。</p><p><img src="'+t+`" alt="eb1693c6ba6195194b3876201a0b5a48"></p><h3 id="安装与配置" tabindex="-1"><a class="header-anchor" href="#安装与配置"><span>安装与配置</span></a></h3><p>确保在所有节点上已经安装了RabbitMQ，并且版本相同。</p><h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h2><h3 id="创建管理员用户" tabindex="-1"><a class="header-anchor" href="#创建管理员用户"><span>创建管理员用户</span></a></h3><p>在每个节点上创建一个具有管理员权限的用户：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rabbitmqctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set_user_tags</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> administrator</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rabbitmqctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set_permissions</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;.*&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;.*&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;.*&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分享erlang-cookie" tabindex="-1"><a class="header-anchor" href="#分享erlang-cookie"><span>分享Erlang Cookie</span></a></h3><p>为了保证节点之间的安全通信，你需要在所有节点上分享相同的Erlang Cookie。例如，在Node1上查看并复制Cookie：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /var/lib/rabbitmq/.erlang.cookie</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后，使用<code>scp</code>命令将Cookie文件复制到其他节点：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">scp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /var/lib/rabbitmq/.erlang.cookie</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rabbit2:/var/lib/rabbitmq/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">scp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /var/lib/rabbitmq/.erlang.cookie</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rabbit3:/var/lib/rabbitmq/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="停止并重启rabbitmq服务" tabindex="-1"><a class="header-anchor" href="#停止并重启rabbitmq服务"><span>停止并重启RabbitMQ服务</span></a></h3><p>在进行集群配置前，确保停止RabbitMQ服务：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rabbitmq-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stop</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后重新启动服务：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rabbitmq-server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -detached</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>启动app</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># rabbitmqctl stop_app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rabbitmqctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start_app</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置集群" tabindex="-1"><a class="header-anchor" href="#配置集群"><span>配置集群</span></a></h3><p>在Node2和Node3上使用以下命令加入Node1的集群：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rabbitmqctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> join_cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rabbit@rabbit1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_5-验证集群状态" tabindex="-1"><a class="header-anchor" href="#_5-验证集群状态"><span>5. 验证集群状态</span></a></h3><p>在每个节点上使用以下命令检查集群状态：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rabbitmqctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cluster_status</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>预期输出如下所示：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@rabbit1 ~]# rabbitmqctl cluster_status</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rabbit@rabbit1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {running_nodes,[rabbit@rabbit3,rabbit@rabbit2,rabbit@rabbit1]},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {cluster_name,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;rabbit@rabbit1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {partitions,[]}]</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">..</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.done.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@rabbit2 ~]# rabbitmqctl cluster_status</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rabbit@rabbit2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {running_nodes,[rabbit@rabbit3,rabbit@rabbit1,rabbit@rabbit2]},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {cluster_name,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;rabbit@rabbit1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {partitions,[]}]</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">..</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.done.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@rabbit2 ~]#</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@rabbit3 ~]# rabbitmqctl cluster_status</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rabbit@rabbit3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[{nodes,[{disc,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]}]},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {running_nodes,[rabbit@rabbit1,rabbit@rabbit2,rabbit@rabbit3]},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {cluster_name,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;rabbit@rabbit1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {partitions,[]}]</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">..</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.done.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@rabbit3 ~]#</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-配置高可用队列" tabindex="-1"><a class="header-anchor" href="#_6-配置高可用队列"><span>6. 配置高可用队列</span></a></h3><h4 id="添加高可用规则" tabindex="-1"><a class="header-anchor" href="#添加高可用规则"><span>添加高可用规则</span></a></h4><p><img src="`+l+'" alt="在这里插入图片描述"></p><p><img src="'+h+'" alt="在这里插入图片描述"></p><p><img src="'+r+'" alt="在这里插入图片描述"></p><p>确保在所有节点上配置镜像队列策略，所有节点策略保持一致，这样即使某个节点宕机，消息仍能在集群内传递。</p><h4 id="配置队列" tabindex="-1"><a class="header-anchor" href="#配置队列"><span>配置队列</span></a></h4><p><img src="'+b+'" alt="在这里插入图片描述"></p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>现在你已经成功搭建了一个由三个节点组成的RabbitMQ镜像集群，该集群能够提供高可用性和容错能力，适合生产环境部署。</p>',45)]))}const o=s(d,[["render",p]]),g=JSON.parse('{"path":"/note-book/RabbitMQ/RabbitMQ%E9%95%9C%E5%83%8F%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html","title":"RabbitMQ镜像集群搭建指南","lang":"zh-CN","frontmatter":{"description":"RabbitMQ镜像集群搭建指南 概述 RabbitMQ是一个开源的消息代理和队列服务器，提供多种传输协议，如AMQP 0-9-1，MQTT，STOMP等。当需要构建高可用和高吞吐量的系统时，RabbitMQ的集群功能变得尤为重要。本文档将指导你如何在三台服务器上设置RabbitMQ镜像集群。 这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RabbitMQ镜像集群搭建指南\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-23T06:11:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paper-Dragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://www.geekery.cn/note-book/RabbitMQ/RabbitMQ%E9%95%9C%E5%83%8F%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"RabbitMQ镜像集群搭建指南"}],["meta",{"property":"og:description","content":"RabbitMQ镜像集群搭建指南 概述 RabbitMQ是一个开源的消息代理和队列服务器，提供多种传输协议，如AMQP 0-9-1，MQTT，STOMP等。当需要构建高可用和高吞吐量的系统时，RabbitMQ的集群功能变得尤为重要。本文档将指导你如何在三台服务器上设置RabbitMQ镜像集群。 这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-23T06:11:47.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-23T06:11:47.000Z"}]]},"git":{"createdTime":1721715107000,"updatedTime":1721715107000,"contributors":[{"name":"PaperDragon-SH","username":"PaperDragon-SH","email":"2678885646@qq.com","commits":1,"url":"https://github.com/PaperDragon-SH"}],"changelog":[{"hash":"2f9bfe8c13c1b24efee1875b9e23401b3148e6df","time":1721715107000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"RabbitMQ镜像集群搭建指南"}]},"readingTime":{"minutes":2.53,"words":759},"filePathRelative":"note-book/RabbitMQ/RabbitMQ镜像集群搭建指南.md","excerpt":"\\n<h2>概述</h2>\\n<p>RabbitMQ是一个开源的消息代理和队列服务器，提供多种传输协议，如AMQP 0-9-1，MQTT，STOMP等。当需要构建高可用和高吞吐量的系统时，RabbitMQ的集群功能变得尤为重要。本文档将指导你如何在三台服务器上设置RabbitMQ镜像集群。</p>\\n<p>这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的 queue，无论元数据还是 queue 里的消息都会存在于多个实例上，就是说，每个 RabbitMQ 节点都有这个 queue 的一个完整镜像，包含 queue 的全部数据的意思。然后每次你写消息到 queue 的时候，都会自动把消息同步到多个实例的 queue 上。</p>","autoDesc":true}');export{o as comp,g as data};
