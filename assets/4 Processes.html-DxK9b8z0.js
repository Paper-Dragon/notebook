import{ah as n,ai as i,ar as e,am as l}from"./app-DjLPpgXq.js";const o="/assets/loading_program-DabHLu5B.png",r="/assets/process_state-BoQP3MUz.png",s="/assets/context-C5BHE8tu.png",a="/assets/proc_state-B7aUWVRc.png",p="/assets/proc-CCNSnY-I.png",c={};function g(m,t){return l(),i("div",null,t[0]||(t[0]=[e('<h1 id="_4-抽象-进程" tabindex="-1"><a class="header-anchor" href="#_4-抽象-进程"><span>4 抽象:进程</span></a></h1><p><strong>概述</strong>:<br> 进程的定义:运行的程序<br> 我们知道程序的运行都需要靠CPU运行,但是我们平时用电脑都是很多个程序同时(至少给人感觉)在运行,难道计算机有很多很多CPU? 当然我们知道计算机只有一个或几个有限的CPU,计算机通过虚拟化CPU,来回迅速的切换运行不同的进程,从而达到同时运行多个任务的目的.<br> 为了实现这个目的,操作系统需要底层的机器机制和上层的策略.<br> 底层的机器机制举例:环境切换(context switch),分时机制(time sharing)...<br> 上层策略: 调度策略...</p><ol><li><p><strong>存储在磁盘里的程序是怎么加载运行变成进程的?</strong></p><ul><li>操作系统首先将代码和静态数据加载到进程的内存地址空间</li><li>分配一些内存作为进程运行时的栈(用于存放局部变量,函数参数,返回地址))</li><li>分配一些内存作为进程的堆(heap),(用于存放动态分配的数据)</li><li>其它初始任务: <ul><li>一般会默认分配三个输出流:标准输入流(input),标准输出流(output),标准错误流(error)</li></ul></li><li>最后:跳到程序执行入口即main()运行<br><img src="'+o+'" alt=""></li></ul></li><li><p><strong>进程的状态(简单来说有3种)</strong></p><ul><li>运行(Running):正在运行</li><li>就绪(Ready):运行就绪,因为某些原因操作系统没选择它运行</li><li>阻塞(Block):执行了某些操作(比如I/O操作),直到某些事件发生才会准备运行 <img src="'+r+'" alt=""></li></ul></li><li><p><strong>进程相关的数据结构</strong></p><ul><li>context : 进程相关的寄存器内容,当切换进程时会将该进程的寄存器内容存起来,当再次切换回来的时候将之前存起来的寄存器内容一一加载到真实的寄存器中 <img src="'+s+'" alt=""></li><li>proc_state: 进程的状态枚举 <img src="'+a+'" alt=""></li><li>proc: 进程的相关信息,包括进程id,父进程id,context的引用,proc_state值等 <img src="'+p+'" alt=""></li></ul></li></ol>',3)]))}const _=n(c,[["render",g]]),d=JSON.parse('{"path":"/ostep-note/1%20virtualization/4%20Processes.html","title":"4 抽象:进程","lang":"zh-CN","frontmatter":{"description":"4 抽象:进程 概述: 进程的定义:运行的程序 我们知道程序的运行都需要靠CPU运行,但是我们平时用电脑都是很多个程序同时(至少给人感觉)在运行,难道计算机有很多很多CPU? 当然我们知道计算机只有一个或几个有限的CPU,计算机通过虚拟化CPU,来回迅速的切换运行不同的进程,从而达到同时运行多个任务的目的. 为了实现这个目的,操作系统需要底层的机器机制...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4 抽象:进程\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paper-Dragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://www.geekery.cn/ostep-note/1%20virtualization/4%20Processes.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"4 抽象:进程"}],["meta",{"property":"og:description","content":"4 抽象:进程 概述: 进程的定义:运行的程序 我们知道程序的运行都需要靠CPU运行,但是我们平时用电脑都是很多个程序同时(至少给人感觉)在运行,难道计算机有很多很多CPU? 当然我们知道计算机只有一个或几个有限的CPU,计算机通过虚拟化CPU,来回迅速的切换运行不同的进程,从而达到同时运行多个任务的目的. 为了实现这个目的,操作系统需要底层的机器机制..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":1.75,"words":526},"filePathRelative":"ostep-note/1 virtualization/4 Processes.md","excerpt":"\\n<p><strong>概述</strong>:<br>\\n进程的定义:运行的程序<br>\\n我们知道程序的运行都需要靠CPU运行,但是我们平时用电脑都是很多个程序同时(至少给人感觉)在运行,难道计算机有很多很多CPU? 当然我们知道计算机只有一个或几个有限的CPU,计算机通过虚拟化CPU,来回迅速的切换运行不同的进程,从而达到同时运行多个任务的目的.<br>\\n为了实现这个目的,操作系统需要底层的机器机制和上层的策略.<br>\\n底层的机器机制举例:环境切换(context switch),分时机制(time sharing)...<br>\\n上层策略: 调度策略...</p>\\n<ol>\\n<li>\\n<p><strong>存储在磁盘里的程序是怎么加载运行变成进程的?</strong></p>\\n<ul>\\n<li>操作系统首先将代码和静态数据加载到进程的内存地址空间</li>\\n<li>分配一些内存作为进程运行时的栈(用于存放局部变量,函数参数,返回地址))</li>\\n<li>分配一些内存作为进程的堆(heap),(用于存放动态分配的数据)</li>\\n<li>其它初始任务:\\n<ul>\\n<li>一般会默认分配三个输出流:标准输入流(input),标准输出流(output),标准错误流(error)</li>\\n</ul>\\n</li>\\n<li>最后:跳到程序执行入口即main()运行<br>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>进程的状态(简单来说有3种)</strong></p>\\n<ul>\\n<li>运行(Running):正在运行</li>\\n<li>就绪(Ready):运行就绪,因为某些原因操作系统没选择它运行</li>\\n<li>阻塞(Block):执行了某些操作(比如I/O操作),直到某些事件发生才会准备运行\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>进程相关的数据结构</strong></p>\\n<ul>\\n<li>context : 进程相关的寄存器内容,当切换进程时会将该进程的寄存器内容存起来,当再次切换回来的时候将之前存起来的寄存器内容一一加载到真实的寄存器中\\n</li>\\n<li>proc_state: 进程的状态枚举\\n</li>\\n<li>proc: 进程的相关信息,包括进程id,父进程id,context的引用,proc_state值等\\n</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{_ as comp,d as data};
