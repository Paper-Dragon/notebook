import{ah as d,ai as e,ar as r,am as a}from"./app-BrW6Zuy9.js";const o={};function n(s,t){return a(),e("div",null,t[0]||(t[0]=[r('<h1 id="python之正则表达式细讲" tabindex="-1"><a class="header-anchor" href="#python之正则表达式细讲"><span>Python之正则表达式细讲</span></a></h1><h2 id="一、行定位符" tabindex="-1"><a class="header-anchor" href="#一、行定位符"><span>一、行定位符</span></a></h2><p>行定位符就是用来描述字符串的边界，“^” 表示行的开始，“$” 表示行的结尾。比如：</p><pre><code>^Ha\n</code></pre><p>该表达式表示要匹配字符串的开头位置是 Ha，如 “Hangzhou is a very beautiful city” 可以匹配，而 “Your words are very funny, Ha” 则不匹配。但如果使用：</p><pre><code>Ha$\n</code></pre><p>后者可以匹配而前者不能匹配。如果要匹配的字符串可以出现在字符串的任意部分，那么可以写成下面的格式，这样两个字符串都能匹配上。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Ha</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="二、元字符" tabindex="-1"><a class="header-anchor" href="#二、元字符"><span>二、元字符</span></a></h2><p>除了前面介绍的 “^” 和 “$” 外，正则表达式里还有更多的元字符，例如下面的正则表达式中就应用了元字符 “\\b” 和 “\\w”。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>\\ban\\w*\\b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面的正则表达式用于匹配以字母 an 开头的字符串，先从字符串的开头 an 处开始匹配，接着是任意数量的字母或数字（\\w*）。该表达式可以匹配 “anaconda” 和 “and246”，但不能与 “abandon” 匹配。更多常见元字符如下表所示：</p><table><thead><tr><th>元字符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符</td><td>. 可以匹配 “acd\\n8R\\t” 中的 a、c、d、8、R、\\t</td></tr><tr><td>\\w</td><td>匹配字母、数字、下划线或汉字</td><td>\\w 可以匹配 “miO次9\\nqw” 中的 “m、i、O、次、9、q、w”，但不能匹配 \\n</td></tr><tr><td>\\W</td><td>匹配除字母、数字、下划线或汉字以外的字符</td><td>\\W 可以匹配 “92d\\nsc” 中的 \\n，但不能匹配 “9、2、d、s、c”</td></tr><tr><td>\\s</td><td>匹配单个的空白符（包括 Tab 键和换行符）</td><td>\\s 可以匹配 “c\\t8B” 中的 \\t</td></tr><tr><td>\\S</td><td>匹配除单个空白符（包括 Tab 键和换行符）以外的所有字符</td><td>\\S 可以匹配 “字we2\\t90” 中的 “字、w、e、2、9、0”</td></tr><tr><td>\\b</td><td>匹配单词的开始或结束，单词的分解符通常是空格，标点符号或者换行</td><td>在 “there were deserts where” 字符串中，\\bw 与 were 中的 w 相匹配，但与 where 中的 w 不匹配</td></tr><tr><td>\\d</td><td>匹配数字</td><td>\\d 可以与 “dg34&amp;” 中的 3、4 匹配</td></tr></tbody></table><h2 id="三、限定符" tabindex="-1"><a class="header-anchor" href="#三、限定符"><span>三、限定符</span></a></h2><p>在上面例子中，使用（\\w*）可以匹配<strong>任意数量</strong>的字母或数字。但如果想要<strong>匹配指定数量</strong>的数字，该如何表示呢？</p><p>正则表达式为我们提供了限定符（指定数量的字符） 来实现该功能。如匹配 11 位电话号码可使用如下表达式：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>^\\d{11}$</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>常用的限定符如下表所示：</p><table><thead><tr><th>限定符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>?</td><td>匹配前面的字符 0 次或 1 次</td><td>Pyth?on，该表达式可以匹配 Python 和 Pyton</td></tr><tr><td>+</td><td>匹配前面的字符 1 次或多次</td><td>Py+thon，该表达式可以匹配的范围从 Python 到 Pyy…thon</td></tr><tr><td>*</td><td>匹配前面的字符 0 次或多次</td><td>Pyt*hon，该表达式可以匹配的范围从 Pyhon 到 Pytt…hon</td></tr><tr><td>{n}</td><td>匹配前面的字符 n 次</td><td>Pytho{3}n，该表达式只匹配 Pythooon</td></tr><tr><td>{n,}</td><td>匹配前面的字符至少 n 次</td><td>Pytho{3,}n，该表达式可以匹配的范围从 Pythooon 到 Pythooo…n</td></tr><tr><td>{n,m}</td><td>匹配前面的字符最少 n 次，最多 m 次</td><td>P{1,3}ython，该表达式可以匹配 Python、PPython、PPPython</td></tr></tbody></table><h2 id="四、字符类" tabindex="-1"><a class="header-anchor" href="#四、字符类"><span>四、字符类</span></a></h2><p>正则表达式查找数字和字母是很简单的，因为已经有了对应这些字符集合的元字符（如 “\\d”、“\\w”），但是如果要匹配没有预定义元字符的字符集合（比如只匹配元音字母a,e,i,o,u）,应该怎么办？   很简单，只需要在方括号里列出它们就行了，像 [aeiou] 可以匹配任何一个英文元音字母，[.?!] 匹配标点符号（“.”，“?”，“!”），也可以轻松的指定一个范围，像 “[0-9]” 代表的含义与 “\\d” 就是完全一致的：代表一位数字。同理，“[a-z0-9A-Z_]” 完全等同于 “\\w”（如果只考虑英文的话）。</p><h2 id="五、排除字符" tabindex="-1"><a class="header-anchor" href="#五、排除字符"><span>五、排除字符</span></a></h2><p>在上面的<strong>字符类</strong>中列出的匹配符合指定字符集合的字符串。现在反过来，匹配不符合指定字符集合的字符串。正则表达式提供了 “^” 字符。这个元字符在上面出现过，表示行的开始。而这里将会放到方括号中，表示排除的意思。例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>[^a-zA-Z]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该表达式用于匹配一个不是字母的字符。</p><h2 id="六、选择字符" tabindex="-1"><a class="header-anchor" href="#六、选择字符"><span>六、选择字符</span></a></h2><p>试想一下，如何匹配身份证号码？首先需要了解一下身份证号码的规则。身份证号码长度为 18 位，前 17 位为数字，最后一位是校验位，可能为数字或字符 X。   在上面的描述中，包含着条件选择的逻辑，这就需要使用选择字符（|）来实现。该字符可以理解为 “或”，匹配身份证的表达式可以写成如下方式：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>(\\d{18}$)|(\\d{17})(\\d|X|x)$</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该表达式的意思是匹配 18 位数字，或者 17 位数字和最后一位。最后一位可以是数字，也可以是 X 或者 x。</p><h2 id="七、转义字符" tabindex="-1"><a class="header-anchor" href="#七、转义字符"><span>七、转义字符</span></a></h2><p>正则表达式中的转义字符（\\）和 Python 中的大同小异，可以将字符本身的含义转成特定的含义，如果是特殊字符（比如 “.” “?” “\\” 等）则转变为普通的字符。举一个 IP 地址的实例，用正则表达式匹配诸如 “127.0.0.1” 格式的 IP 地址。如果直接使用点字符，格式为：</p><pre><code>[1-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}\n</code></pre><p>这显然不对，因为 “.” 可以匹配一个任意字符。这时，不仅是127.0.0.1 这样的 IP，连 127a0b0c1 这样的字符串也会被匹配出来。所以在使用 “.” 时，需要使用转义字符（\\）。修改后上面的正则表达式格式为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>[1-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>说明</strong>：<strong>括号在正则表达式中也算是一个元字符。</strong></p><h2 id="八、分组" tabindex="-1"><a class="header-anchor" href="#八、分组"><span>八、分组</span></a></h2><p>通过上面的选择字符板块，大家对小括号的作用有了一定了解。小括号字符的第一个作用就是可以改变限定符的作用范围，如 “|” “*” “^” 等。例如下面的表达式中包含小括号。</p><pre><code>(fruit|food)s\n</code></pre><p>这个表达式的意思是匹配单词 fruits 或 foods，如果不使用小括号，那么就变成了匹配单词 fruit 和 foods 了。   小括号的第二个作用是分组，也就是子表达式。如 ([a-z]{1,3}){3}，就是对分组 ([a-z]{1,3}) 进行重复操作。</p><h2 id="九、正则表达式语法" tabindex="-1"><a class="header-anchor" href="#九、正则表达式语法"><span>九、正则表达式语法</span></a></h2><p>在Python中使用正则表达式时，是将其作为模式字符串使用的。例如，将匹配不是字母的一个字符的正则表达式表示为模式字符串，可以使用下面的代码：</p><pre><code>&#39;[^a-zA-Z]&#39;\n</code></pre><p>而如果将匹配以字母 g 开头的单词的正则表达式转换为模式字符串，则不能直接在其两侧添加引号定界符，例如，下面的代码是不正确的。</p><pre><code>&#39;\\bg\\w*\\b&#39;\n</code></pre><p>而是需要将其中的 “\\” 进行转义，转换后的结果为：</p><pre><code>&#39;\\\\bg\\\\w*\\\\b&#39;\n</code></pre><p>由于模式字符串中可能包括大量的特殊字符和反斜杠，所以需要写为原生字符串，即在模式字符串前加 r 或 R。例如，上面的模式字符串采用原生字符串表示为：</p><p>r&#39;\\bg\\w*\\b&#39;</p><pre><code>r&#39;\\bg\\w*\\b&#39;\n</code></pre><p>🌱 说明：在编写模式字符串时，并不是所有的反斜杠都需要进行转换，没有特殊意义的就不用转。</p><h2 id="常用正则表达式" tabindex="-1"><a class="header-anchor" href="#常用正则表达式"><span>常用正则表达式</span></a></h2><table><thead><tr><th>方式</th><th>表达式</th></tr></thead><tbody><tr><td>[火车车次]</td><td><code>[GCDZTSPKXLY1-9]\\d{1,4}</code></td></tr><tr><td>[手机机身码(IMEI)]</td><td><code>\\d{15,17}</code></td></tr><tr><td>[必须带端口号的网址]</td><td><code>(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z]{2,6})(:\\d{1,5})([\\/\\w\\.-]*)*\\/?</code></td></tr><tr><td>[网址(支持端口和参数)]</td><td><code>(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z]{2,6})(:\\d{1,5})?([\\/\\w\\.-]*)*\\/?(#[\\S]+)?</code></td></tr><tr><td>[统一社会信用代码]</td><td><code>[0-9A-HJ-NPQRTUWXY]{2}\\d{6}[0-9A-HJ-NPQRTUWXY]{10}</code></td></tr><tr><td>[统一社会信用代码(宽松匹配)(15位/18位/20位数字/字母)]</td><td>`(([0-9A-Za-z]{15})</td></tr><tr><td>[迅雷链接]</td><td><code>thunderx?:\\/\\/[a-zA-Z\\d]+=</code></td></tr><tr><td>[ed2k链接(宽松匹配)]</td><td><code>ed2k:\\/\\/|file|.+|\\/</code></td></tr><tr><td>[磁力链接(宽松匹配)]</td><td><code>magnet:\\?xt=urn:btih:[0-9a-fA-F]{40,}.*</code></td></tr><tr><td>[子网掩码]</td><td>`(?:\\d{1,2}</td></tr><tr><td>[linux&quot;隐藏文件&quot;路径]</td><td><code>\\/(?:[^/]+\\/)*\\.[^/]*/</code></td></tr><tr><td>[linux文件夹路径]</td><td><code>\\/(?:[^/]+\\/)*</code></td></tr><tr><td>[linux文件路径]</td><td><code>\\/(?:[^/]+\\/)*[^/]+</code></td></tr><tr><td>[window文件夹路径]</td><td><code>[a-zA-Z]:\\\\(?:\\w+\\\\?)*</code></td></tr><tr><td>[window下文件路径]</td><td><code>[a-zA-Z]:\\\\(?:\\w+\\\\)*\\w+\\.\\w+</code></td></tr><tr><td>[股票代码(A股)]</td><td>`(s[hz]</td></tr><tr><td>[html注释]</td><td><code>&lt;!--[\\s\\S]*?--&gt;</code></td></tr><tr><td>[md5格式(32位)]</td><td>`([a-f\\d]{32}</td></tr><tr><td>[GUID/UUID]</td><td><code>[a-f\\d]{4}(?:[a-f\\d]{4}-){4}[a-f\\d]{12}</code></td></tr><tr><td>[版本号格式必须为X.Y.Z]</td><td><code>\\d+(?:\\.\\d+){2}</code></td></tr><tr><td>[视频链接地址]</td><td>`https?://(.+/)+.+(.(swf</td></tr><tr><td>[图片链接地址]</td><td>`https?://(.+/)+.+(.(gif</td></tr><tr><td>[24小时制时间[HH:mm:ss]]</td><td>`(?:[01]\\d</td></tr><tr><td>[12小时制时间[hh:mm:ss]]</td><td>`(?:1[0-2]</td></tr><tr><td>[base64格式]</td><td>`^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==</td></tr><tr><td>[数字/货币金额[支持负数,千分位分隔符]]</td><td><code>-?\\d+(,\\d{3})*(\\.\\d{1,2})?</code></td></tr><tr><td>[银行卡号10到30位, 覆盖对公/私账户]</td><td><code>[1-9]\\d{9,29}</code></td></tr><tr><td>[中文姓名]</td><td><code>(?:[\\u4e00-\\u9fa5·]{2,16})</code></td></tr><tr><td>[英文姓名]</td><td><code>[a-zA-Z][a-zA-Z\\s]{0,20}[a-zA-Z]</code></td></tr><tr><td>[车牌号(新能源)]</td><td>`[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-HJ-NP-Z](?😦(\\d{5}[A-HJK])</td></tr><tr><td>[车牌号(非新能源)]</td><td><code>[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-HJ-NP-Z][A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]</code></td></tr><tr><td>[车牌号(新能源+非新能源)]</td><td><code>[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-HJ-NP-Z][A-HJ-NP-Z0-9]{4,5}[A-HJ-NP-Z0-9挂学警港澳]</code></td></tr><tr><td>[手机号中国(严谨)]</td><td>`(?😦?:+</td></tr><tr><td>[手机号中国(宽松),13,14,15,16,17,18,19开头即可]</td><td>`(?😦?:+</td></tr><tr><td>[手机号中国(最宽松)]</td><td>`(?😦?:+</td></tr><tr><td>[日期]</td><td>`\\d{1,4}(-)(1[0-2]</td></tr><tr><td>[邮箱]</td><td><code>[\\w!#$%&amp;&#39;*+/=?^_</code>{</td></tr><tr><td>[座机电话(国内)]</td><td>`(?😦?:\\d{3}-)?\\d{8}</td></tr><tr><td>[身份证号(1代15位数字)]</td><td>`[1-9]\\d{7}(?:0\\d</td></tr><tr><td>[18位身份证号,最后一位可能为数字或字符X]</td><td>`[1-9]\\d{5}(?:18</td></tr><tr><td>[身份证号,支持1/2代(15位/18位数字)]</td><td>`(^\\d{8}(0\\d</td></tr><tr><td>[护照[包含香港、澳门]]</td><td>`([EK]\\d{8}</td></tr><tr><td>[帐号是否合法[字母开头,允许5-16字节,允许字母数字下划线组合]]</td><td><code>[a-zA-Z]\\w{4,15}</code></td></tr><tr><td>[中文/汉字]</td><td>`(?:[\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uFA0E\\uFA0F\\uFA11\\uFA13\\uFA14\\uFA1F\\uFA21\\uFA23\\uFA24\\uFA27-\\uFA29]</td></tr><tr><td>[小数]</td><td><code>\\d+\\.\\d+</code></td></tr><tr><td>[数字]</td><td><code>\\d{1,}</code></td></tr><tr><td>[html标签(宽松匹配)]</td><td><code>&lt;(\\w+)[^&gt;]*&gt;(.*?&lt;\\/\\1&gt;)?</code></td></tr><tr><td>[qq号格式正确]</td><td><code>[1-9][0-9]{4,10}</code></td></tr><tr><td>[数字和字母组成]</td><td><code>[A-Za-z0-9]+</code></td></tr><tr><td>[英文字母]</td><td><code>[a-zA-Z]+</code></td></tr><tr><td>[小写英文字母组成]</td><td><code>[a-z]+</code></td></tr><tr><td>[大写英文字母]</td><td><code>[A-Z]+</code></td></tr><tr><td>[密码强度校验,最少6位,包括至少1个大写字母,1个小写字母,1个数字,1个特殊字符]</td><td><code>\\S*(?=\\S{6,})(?=\\S*\\d)(?=\\S*[A-Z])(?=\\S*[a-z])(?=\\S*[!@#$%^&amp;*? ])\\S*</code></td></tr><tr><td>[用户名校验,4到16位[字母,数字,下划线,减号]]</td><td><code>[a-zA-Z0-9_-]{4,16}</code></td></tr><tr><td>[IPV4[:端口]]</td><td>`((\\d</td></tr><tr><td>[IPV6[:端口]]</td><td>`(([0-9a-fA-F]{1,4}😃{7,7}[0-9a-fA-F]{1,4}</td></tr><tr><td>[16进制颜色]</td><td>`#?([a-fA-F0-9]{6}</td></tr><tr><td>[微信号,6至20位,以字母开头,字母,数字,减号,下划线]</td><td><code>[a-zA-Z][-_a-zA-Z0-9]{5,19}</code></td></tr><tr><td>[邮政编码(中国)]</td><td>`(0[1-7]</td></tr><tr><td>[中文和数字]</td><td>`((?:[\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uFA0E\\uFA0F\\uFA11\\uFA13\\uFA14\\uFA1F\\uFA21\\uFA23\\uFA24\\uFA27-\\uFA29]</td></tr><tr><td>[不能包含字母]</td><td><code>[^A-Za-z]*</code></td></tr><tr><td>[java包名]</td><td><code>([a-zA-Z_]\\w*)+([.][a-zA-Z_]\\w*)+</code></td></tr><tr><td>[mac地址]</td><td>`((([a-f0-9]{2}😃{5})</td></tr><tr><td>[匹配连续重复的字符]</td><td><code>(.)\\1+</code></td></tr><tr><td>[数字和英文字母组成,并且同时含有数字和英文字母]</td><td><code>(?=.*[a-zA-Z])(?=.*\\d).+</code></td></tr><tr><td>[香港身份证]</td><td><code>[a-zA-Z]\\d{6}\\([\\dA]\\)</code></td></tr><tr><td>[澳门身份证]</td><td>`[1</td></tr><tr><td>[台湾身份证]</td><td><code>[a-zA-Z][0-9]{9}</code></td></tr></tbody></table>',52)]))}const c=d(o,[["render",n]]),h=JSON.parse('{"path":"/note-book/Research_Develop/Python/Python%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%BB%86%E8%AE%B2.html","title":"Python之正则表达式细讲","lang":"zh-CN","frontmatter":{"description":"Python之正则表达式细讲 一、行定位符 行定位符就是用来描述字符串的边界，“^” 表示行的开始，“$” 表示行的结尾。比如： 该表达式表示要匹配字符串的开头位置是 Ha，如 “Hangzhou is a very beautiful city” 可以匹配，而 “Your words are very funny, Ha” 则不匹配。但如果使用： 后...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python之正则表达式细讲\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T07:56:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paper-Dragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://www.geekery.cn/note-book/Research_Develop/Python/Python%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%BB%86%E8%AE%B2.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"Python之正则表达式细讲"}],["meta",{"property":"og:description","content":"Python之正则表达式细讲 一、行定位符 行定位符就是用来描述字符串的边界，“^” 表示行的开始，“$” 表示行的结尾。比如： 该表达式表示要匹配字符串的开头位置是 Ha，如 “Hangzhou is a very beautiful city” 可以匹配，而 “Your words are very funny, Ha” 则不匹配。但如果使用： 后..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T07:56:45.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-19T07:56:45.000Z"}]]},"git":{"createdTime":1691939318000,"updatedTime":1710835005000,"contributors":[{"name":"Paper-Dragon","username":"Paper-Dragon","email":"2678885646@qq.com","commits":1,"url":"https://github.com/Paper-Dragon"},{"name":"PaperDragon-SH","username":"PaperDragon-SH","email":"2678885646@qq.com","commits":1,"url":"https://github.com/PaperDragon-SH"}],"changelog":[{"hash":"cb0daa33b6329eb21784aa12ccdc214113fb2885","time":1710835005000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"c"},{"hash":"392a519398b2e846f316619fbe831e100164de7c","time":1691939318000,"email":"2678885646@qq.com","author":"Paper-Dragon","message":"Create The Worid!"}]},"readingTime":{"minutes":12.21,"words":3663},"filePathRelative":"note-book/Research_Develop/Python/Python之正则表达式细讲.md","excerpt":"\\n<h2>一、行定位符</h2>\\n<p>行定位符就是用来描述字符串的边界，“^” 表示行的开始，“$” 表示行的结尾。比如：</p>\\n<pre><code>^Ha\\n</code></pre>\\n<p>该表达式表示要匹配字符串的开头位置是 Ha，如 “Hangzhou is a very beautiful city” 可以匹配，而 “Your words are very funny, Ha” 则不匹配。但如果使用：</p>\\n<pre><code>Ha$\\n</code></pre>\\n<p>后者可以匹配而前者不能匹配。如果要匹配的字符串可以出现在字符串的任意部分，那么可以写成下面的格式，这样两个字符串都能匹配上。</p>","autoDesc":true}');export{c as comp,h as data};
