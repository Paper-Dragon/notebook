import{ah as n,ai as e,ar as a,am as p}from"./app-9iAvcpSg.js";const r="/assets/2019-10-02-10-41-47-DE3GrlgF.png",o={};function s(i,t){return p(),e("div",null,t[0]||(t[0]=[a('<h1 id="_21-swapping-mechanisms-超越物理内存-交换机制" tabindex="-1"><a class="header-anchor" href="#_21-swapping-mechanisms-超越物理内存-交换机制"><span>21 Swapping Mechanisms 超越物理内存:交换机制</span></a></h1><p><strong>概述:</strong><br> 早期的机器不能把所有进程需要的所有页同时放在内存中,因此,多进程系统需要操作系统支持比物理内存更大的地址空间.让所有进程不必担心程序的数据是否有足够空间存储.交换机制则可以达到这个目的.简单来说,在物理内存不够的时候,交换机制通过交换物理内存中不常用的分页到硬盘的交换空间(提前开辟好的)中,提供内存.</p><ol><li><p><strong>交换空间</strong><br> 一般存在硬盘上,空间比内存大很多.为了方便分页的写入和读出,操作系统一般会以页大小为单位读取或写入</p></li><li><p><strong>存在位</strong><br> 我们知道分页的位置信息是存在分页表中的,如果分页被交换到交换空间了,在分页项中如何体现呢?这就用到存在位了,分页项会有一个比特位来表示该分页是否被交换了,1代表存在物理内存中,0代表被交换了.访问被交换的分页时,会产生页错误中断(page fault)</p></li><li><p><strong>页错误</strong><br> 当页错误产生时,操作系统会被唤醒,用以存在操作系统的页错误处理程序(page-fault handler)处理. 操作系统会读取分页项中查找交换地址,读入内存,然后更新分页表的存在位,并重新开始读取分页指令.</p></li></ol><p>包含页错误的内存访问流程图: <img src="'+r+'" alt=""></p><ol start="4"><li><strong>交换策略</strong><br> 为了保证始终有少量的空闲内存,操作系统会设置高水位线(HW)和低水位线(LW),当操作系统发现空闲内存少于LW时,则启动后台负责释放内存的线程,直到有HW可用的物理内存分页.</li></ol>',5)]))}const g=n(o,[["render",s]]),c=JSON.parse('{"path":"/ostep-note/1%20virtualization/21%20Swapping%20Mechanisms.html","title":"21 Swapping Mechanisms 超越物理内存:交换机制","lang":"zh-CN","frontmatter":{"description":"21 Swapping Mechanisms 超越物理内存:交换机制 概述: 早期的机器不能把所有进程需要的所有页同时放在内存中,因此,多进程系统需要操作系统支持比物理内存更大的地址空间.让所有进程不必担心程序的数据是否有足够空间存储.交换机制则可以达到这个目的.简单来说,在物理内存不够的时候,交换机制通过交换物理内存中不常用的分页到硬盘的交换空间(提...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"21 Swapping Mechanisms 超越物理内存:交换机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paper-Dragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://www.geekery.cn/ostep-note/1%20virtualization/21%20Swapping%20Mechanisms.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"21 Swapping Mechanisms 超越物理内存:交换机制"}],["meta",{"property":"og:description","content":"21 Swapping Mechanisms 超越物理内存:交换机制 概述: 早期的机器不能把所有进程需要的所有页同时放在内存中,因此,多进程系统需要操作系统支持比物理内存更大的地址空间.让所有进程不必担心程序的数据是否有足够空间存储.交换机制则可以达到这个目的.简单来说,在物理内存不够的时候,交换机制通过交换物理内存中不常用的分页到硬盘的交换空间(提..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":1.69,"words":508},"filePathRelative":"ostep-note/1 virtualization/21 Swapping Mechanisms.md","excerpt":"\\n<p><strong>概述:</strong><br>\\n早期的机器不能把所有进程需要的所有页同时放在内存中,因此,多进程系统需要操作系统支持比物理内存更大的地址空间.让所有进程不必担心程序的数据是否有足够空间存储.交换机制则可以达到这个目的.简单来说,在物理内存不够的时候,交换机制通过交换物理内存中不常用的分页到硬盘的交换空间(提前开辟好的)中,提供内存.</p>\\n<ol>\\n<li>\\n<p><strong>交换空间</strong><br>\\n一般存在硬盘上,空间比内存大很多.为了方便分页的写入和读出,操作系统一般会以页大小为单位读取或写入</p>\\n</li>\\n<li>\\n<p><strong>存在位</strong><br>\\n我们知道分页的位置信息是存在分页表中的,如果分页被交换到交换空间了,在分页项中如何体现呢?这就用到存在位了,分页项会有一个比特位来表示该分页是否被交换了,1代表存在物理内存中,0代表被交换了.访问被交换的分页时,会产生页错误中断(page fault)</p>\\n</li>\\n<li>\\n<p><strong>页错误</strong><br>\\n当页错误产生时,操作系统会被唤醒,用以存在操作系统的页错误处理程序(page-fault handler)处理. 操作系统会读取分页项中查找交换地址,读入内存,然后更新分页表的存在位,并重新开始读取分页指令.</p>\\n</li>\\n</ol>","autoDesc":true}');export{g as comp,c as data};
