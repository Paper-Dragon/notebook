import{ah as e,ai as d,ar as s,am as n}from"./app-C6kkXkiI.js";const a="/assets/image-20230808180108720-DJ7eQmwr.png",r="/assets/v2-a477b9c05cf6e89811178c08e0fc9cae_720w-b0xQyZxt.png",c="/assets/image-20230808180206252-B8fXs1wM.png",o="/assets/v2-7fc6f14876857909c2753424b93e59d4_720w-zGdONNMQ.png",p="/assets/v2-63a0f0854b03b51b6d678833445b91fd_720w-CpXFC4Fx.png",i="/assets/v2-3113edfaa426134fe9dee7568a5333c5_720w-C_O03EY9.png",l="/assets/v2-1b8c58acbfbea23c8fb8ccd77be9ac4f_720w-BUfHOjAa.webp",m="/assets/image-20230808180259263-9uG4nYUz.png",h="/assets/v2-423d1323a2f8a4a9f56a7e6bead8c483_720w-CUh7lNAI.png",_="/assets/image-20230808180239924-DmCcyoGN.png",g="/assets/image-20230808180325857-CoYVGhpq.png",u="/assets/image-20230808180343322-Cwba-mvV.png",f={};function w(b,t){return n(),d("div",null,t[0]||(t[0]=[s('<h1 id="linux内核子系统-网络" tabindex="-1"><a class="header-anchor" href="#linux内核子系统-网络"><span>Linux内核子系统-网络</span></a></h1><blockquote><p>某教育内核讨论区：<a href="https://kernel.0voice.com/forum.php?mod=guide&amp;view=newthread" target="_blank" rel="noopener noreferrer">https://kernel.0voice.com/forum.php?mod=guide&amp;view=newthread</a></p><p>netfilter参数详解： <a href="https://www.kernel.org/doc/html/latest/networking/nf_conntrack-sysctl.html#proc-sys-net-netfilter-nf-conntrack-variables" target="_blank" rel="noopener noreferrer">https://www.kernel.org/doc/html/latest/networking/nf_conntrack-sysctl.html#proc-sys-net-netfilter-nf-conntrack-variables</a> 已经摘录部分</p><p>部分来源： <a href="https://zhuanlan.zhihu.com/p/561781463" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/561781463</a></p><p>致谢： <a href="https://www.zhihu.com/people/linuxwang-xian-sheng" target="_blank" rel="noopener noreferrer">https://www.zhihu.com/people/linuxwang-xian-sheng</a></p><p>源地址： <a href="https://juejin.cn/post/6993124663878484005" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6993124663878484005</a></p></blockquote><h2 id="linux内核中的tcp参数" tabindex="-1"><a class="header-anchor" href="#linux内核中的tcp参数"><span>Linux内核中的TCP参数</span></a></h2><h3 id="proc-sys-net-ipv4" tabindex="-1"><a class="header-anchor" href="#proc-sys-net-ipv4"><span>/Proc/sys/net/ipv4/</span></a></h3><p><code>/Proc/sys/net/ipv4/</code>存放着<code>TCP</code>参数的文件,目录中的内容用来添加网络设置，在其中的许多设置，可以用来阻止对系统的攻击，或用来设置系统的路由功能。</p><p><img src="'+a+'" alt="image-20230808180108720"></p><p><code>tcp_syn_retries</code> 客户端发起<code>SYN</code>连接，如果超时会进行重传，重传的次数</p><p><img src="'+r+'" alt="img"></p><p><img src="'+c+'" alt="image-20230808180206252"></p><p>接着我们使用<code>sysctl net.ipv4.tcp_syn_retries=2</code>把这个参数修改为<code>2</code>测试一下</p><p><img src="'+o+'" alt="img"></p><p>接着我们来验证一下，我们去<code>ssh</code>一台不存在的主机，因为<code>ssh</code>也是基于<code>tcp</code></p><p><img src="'+p+'" alt="img"></p><p>通过<code>wireshark</code>抓包可以看到，果然重传了<code>2</code>个数据包</p><p><img src="'+i+'" alt="img"></p><p><code>net.ipv4.tcp_window_scaling</code>启用或关闭窗口扩大因子选项</p><p><img src="'+l+'" alt="img"></p><p><img src="'+m+'" alt="image-20230808180259263"></p><p><img src="'+h+'" alt="img"></p><p><code>Net.ipv4.tcp_sack</code>启用或关闭选择确认<code>（Selective Acknowledgement， SACK）</code>选项</p><p><img src="'+_+'" alt="image-20230808180239924"></p><table><thead><tr><th>名称</th><th>默认值</th><th>建议值</th><th>描述</th></tr></thead><tbody><tr><td>tcpsyn_retries</td><td>5</td><td>1</td><td>对于一个新建连接，内核要发送多少个SYN连接请求才决定放弃。不应该大于255,默认值是5，对应于180毫秒左右时间。（对于大负载而物理通信良好的网络来说，这个值偏高，可以修改为2。这个值仅仅是针对对外的连接，对进来的连接，是由tcp_retries1决定）</td></tr><tr><td>tcp_synack_retries</td><td>5</td><td>1</td><td>对于远端的连接请求SYN，内核会发送SYN+ACK数据包，以确认收到上一个SYN连接请求包。这是所谓的三次握手机制的第二个步骤。这里决定内核再放弃之前所发送出的SYN+ACK数目。不应该大于255，默认值是5，对应于180秒左右时间。</td></tr><tr><td>tcp_keepalive_time</td><td>7200</td><td>600</td><td>TCP发送keepalive探测消息的间隔时间（秒），用于确认TCP连接是否有效。防止两边建立连接但不发送数据的攻击。</td></tr><tr><td>tcp_keepalive_probes</td><td>9</td><td>3</td><td>TCP发送keepalive探测消息的间隔时间（秒），用于确认TCP连接是否有效。</td></tr><tr><td>tcp_keepalive_intvl</td><td>74</td><td>15</td><td>探测消息未获得响应时，重发该消息的间隔时间（秒）。默认值为75秒。 (对于普通应用来说,这个值有一些偏大,可以根据需要改小.特别是web类服务器需要改小该值,15是个比较合适的值)</td></tr><tr><td>tcp_retries1</td><td>3</td><td>3</td><td>放弃回应一个TCP连接请求前﹐需要进行多少次重试。RFC 规定最低的数值是3</td></tr><tr><td>tcp_retries2</td><td>15</td><td>5</td><td>在丢弃激活(已建立通讯状况)的TCP连接之前﹐需要进行多少次重试。默认值为15，根据RTO的值来决定，相当于13-30分钟(RFC1122规定，必须大于100秒) (这个值根据目前的网络设置,可以适当地改小,我的网络内修改为了5)</td></tr><tr><td>tcp_orphan_retries</td><td>7</td><td>3</td><td>在近端丢弃TCP连接之前﹐要进行多少次重试。默认值是7个﹐相当于 50秒 - 16分钟﹐视 RTO 而定。如果您的系统是负载很大的web服务器﹐那么也许需要降低该值,这类 sockets 可能会耗费大量的资源。另外参的考tcp_max_orphans。</td></tr><tr><td>tcp_fin_timeout</td><td>60</td><td>2</td><td>对于本端断开的socket连接，TCP保持在FIN-WAIT-2状态的时间。对方可能会断开连接或一直不结束连接或不可预料的进程死亡。默认值为 60 秒</td></tr><tr><td>tcp_max_tw_buckets</td><td>180000</td><td>36000</td><td>系统在同时所处理的最大 timewait sockets 数目。如果超过此数的话，time-wait socket 会被立即砍除并且显示警告信息。之所以要设定这个限制﹐纯粹为了抵御那些简单的 DoS 攻击﹐不过﹐如果网络条件需要比默认值更多﹐则可以提高它(或许还要增加内存)。(事实上做NAT的时候最好可以适当地增加该值)</td></tr><tr><td>tcp_tw_recycle</td><td>0</td><td>1</td><td>打开快速 TIME-WAIT sockets 回收。除非得到技术专家的建议或要求﹐请不要随意修改这个值。(做NAT的时候，建议打开它)</td></tr><tr><td>tcp_tw_reuse</td><td>0</td><td>1</td><td>表示是否允许重新应用处于TIME-WAIT状态的socket用于新的TCP连接(这个对快速重启动某些服务,而启动后提示端口已经被使用的情形非常有帮助)</td></tr><tr><td>tcp_max_orphans</td><td>8192</td><td>32768</td><td>系统所能处理不属于任何进程的TCP sockets最大数量。假如超过这个数量，那么不属于任何进程的连接会被立即reset，并同时显示警告信息。之所以要设定这个限制，纯粹为了抵御那些简单的 DoS 攻击，千万不要依赖这个或是人为的降低这个限制。如果内存大更应该增加这个值。(这个值Redhat AS版本中设置为32768,但是很多防火墙修改的时候,建议该值修改为2000)</td></tr><tr><td>tcp_abort_on_overflow</td><td>0</td><td>0</td><td>当守护进程太忙而不能接受新的连接，就象对方发送reset消息，默认值是false。这意味着当溢出的原因是因为一个偶然的猝发，那么连接将恢复状态。只有在你确信守护进程真的不能完成连接请求时才打开该选项，该选项会影响客户的使用。(对待已经满载的sendmail,apache这类服务的时候,这个可以很快让客户端终止连接,可以给予服务程序处理已有连接的缓冲机会,所以很多防火墙上推荐打开它)</td></tr><tr><td>tcp_synookies</td><td>0</td><td>1</td><td>只有在内核编译时选择了CONFIG_SYNCOOKIES时才会发生作用。当出现syn等候队列出现溢出时象对方发送syncookies。目的是为了防止syn flood攻击。</td></tr><tr><td>tcp_stdurg</td><td>0</td><td>0</td><td>使用 TCP urg pointer 字段中的主机请求解释功能。大部份的主机都使用老旧的 BSD解释，因此如果您在 Linux 打开它，或会导致不能和它们正确沟通。</td></tr><tr><td>tcp_max_syn_backlog</td><td>1024</td><td>16384</td><td>对于那些依然还未获得客户端确认的连接请求，需要保存在队列中最大数目。对于超过 128Mb 内存的系统，默认值是 1024 ，低于 128Mb 的则为 128。如果服务器经常出现过载，可以尝试增加这个数字。假如您将此值设为大于 1024，最好修改include/net/tcp.h里面的TCP_SYNQ_HSIZE，以保持TCP_SYNQ_HSIZE*16(SYN Flood攻击利用TCP协议散布握手的缺陷，伪造虚假源IP地址发送大量TCP-SYN半打开连接到目标系统，最终导致目标系统Socket队列资源耗尽而无法接受新的连接。为了应付这种攻击，现代Unix系统中普遍采用多连接队列处理的方式来缓冲(而不是解决)这种攻击，是用一个基本队列处理正常的完全连接应用(Connect()和Accept() )，是用另一个队列单独存放半打开连接。这种双队列处理方式和其他一些系统内核措施(例如Syn-Cookies/Caches)联合应用时，能够比较有效的缓解小规模的SYN Flood攻击(事实证明)</td></tr><tr><td>tcp_window_scaling</td><td>1</td><td>1</td><td>该文件表示设置tcp/ip会话的滑动窗口大小是否可变。参数值为布尔值，为1时表示可变，为0时表示不可变。tcp/ip通常使用的窗口最大可达到65535字节，对于高速网络，该值可能太小，这时候如果启用了该功能，可以使tcp/ip滑动窗口大小增大数个数量级，从而提高数据传输的能力(RFC 1323)。</td></tr><tr><td>tcp_timestamps</td><td>1</td><td>1</td><td>Timestamps 用在其它一些东西中，可以防范那些伪造的sequence号码。一条1G的宽带线路或许会重遇到带 out-of-line数值的旧sequence 号码(假如它是由于上次产生的)。Timestamp 会让它知道这是个 ‘旧封包’。(该文件表示是否启用以一种比超时重发更精确的方法（RFC 1323）来启用对RTT的计算；为了实现更好的性能应该启用这个选项。)</td></tr><tr><td>tcp_sack</td><td>1</td><td>1</td><td>使用 Selective ACK，它可以用来查找特定的遗失的数据报— 因此有助于快速恢复状态。该文件表示是否启用有选择的应答（Selective Acknowledgment），这可以通过有选择地应答乱序接收到的报文来提高性能，这样可以让发送者只发送丢失的报文段。对于广域网通信来说这个选项应该启用，但是这会增加对 CPU 的占用。</td></tr><tr><td>tcp_fack</td><td>1</td><td>1</td><td>打开FACK拥塞避免和快速重传功能。注意，当tcp_sack设置为0的时候，这个值即使设置为1也无效，这个是TCP连接靠谱的核心功能</td></tr><tr><td>tcp_dsack</td><td>1</td><td>1</td><td>允许TCP发送”两个完全相同”的SACK。</td></tr><tr><td>tcp_ecn</td><td>0</td><td>0</td><td>TCP的直接拥塞通告功能。</td></tr><tr><td>tcp_reordering</td><td>3</td><td>6</td><td>TCP流中重排序的数据报最大数量。 一般有看到推荐把这个数值略微调整大一些</td></tr><tr><td>tcp_retans_collapse</td><td>1</td><td>0</td><td>对于某些有bug的打印机提供针对其bug的兼容性。一般不需要这个支持,可以关闭它</td></tr><tr><td>tcp_wmem：mindefaultmax</td><td>4096 16384 131072</td><td>8192 131072 16777216</td><td>发送缓存设置。 min：为TCP socket预留用于发送缓冲的内存最小值。每个tcp socket都可以在建议以后都可以使用它。默认值为4096(4K)。 default：为TCP socket预留用于发送缓冲的内存数量，默认情况下该值会影响其它协议使用的net.core.wmem_default 值，一般要低于net.core.wmem_default的值。默认值为16384(16K)。 max: 用于TCP socket发送缓冲的内存最大值。该值不会影响net.core.wmem_max，”静态”选择参数SO_SNDBUF则不受该值影响。默认值为131072(128K)。对于服务器而言，增加这个参数的值对于发送数据很有帮助</td></tr><tr><td>tcprmem：mindefaultmax</td><td>4096 87380 174760</td><td>32768 131072 16777216</td><td>接收缓存设置。同tcp_wmem</td></tr><tr><td>tcp_mem：mindefaultmax</td><td>根据内存计算</td><td>786432 1048576 1572864</td><td>low：当TCP使用了低于该值的内存页面数时，TCP不会考虑释放内存。即低于此值没有内存压力。(理想情况下，这个值应与指定给 tcp_wmem 的第 2 个值相匹配 - 这第 2 个值表明，最大页面大小乘以最大并发请求数除以页大小 (131072 300 / 4096)。 ) pressure：当TCP使用了超过该值的内存页面数量时，TCP试图稳定其内存使用，进入pressure模式，当内存消耗低于low值时则退出pressure状态。(理想情况下这个值应该是 TCP 可以使用的总缓冲区大小的最大值 (204800 300 / 4096)。 ) high：允许所有tcp sockets用于排队缓冲数据报的页面量。(如果超过这个值，TCP 连接将被拒绝，这就是为什么不要令其过于保守 (512000 *300 / 4096) 的原因了。 在这种情况下，提供的价值很大，它能处理很多连接，是所预期的 2.5 倍；或者使现有连接能够传输 2.5 倍的数据。</td></tr><tr><td>tcp_app_win</td><td>31</td><td>31</td><td>保留max(window/2^tcp_app_win, mss)数量的窗口由于应用缓冲。当为0时表示不需要缓冲。</td></tr><tr><td>tcp_adv_win_scale</td><td>2</td><td>2</td><td>计算缓冲开销。</td></tr><tr><td>tcp_low_latency</td><td>0</td><td>0</td><td>允许 TCP/IP 栈适应在高吞吐量情况下低延时的情况；这个选项一般情形是的禁用。</td></tr><tr><td>tcp_westwood</td><td>0</td><td>0</td><td>启用发送者端的拥塞控制算法，它可以维护对吞吐量的评估，并试图对带宽的整体利用情况进行优化；对于 WAN 通信来说应该启用这个选项。</td></tr><tr><td>tcp_bic</td><td>0</td><td>0</td><td>为快速长距离网络启用 Binary Increase Congestion；这样可以更好地利用以 GB 速度进行操作的链接；对于 WAN 通信应该启用这个选项。</td></tr><tr><td>ip_forward</td><td>0</td><td>1</td><td>NAT必须开启IP转发支持，把该值写1</td></tr><tr><td>ip_local_port_range:minmax</td><td>32768 61000</td><td>1024 65000</td><td>表示用于向外连接的端口范围，默认比较小，这个范围同样会间接用于NAT表规模。</td></tr><tr><td>ip_conntrack_max</td><td>65535</td><td>65535</td><td>系统支持的最大ipv4连接数，默认65536（事实上这也是理论最大值），同时这个值和你的内存大小有关，1G以上内存这个值都是默认65536</td></tr></tbody></table><p><code>/Proc/sys/net/netfilter/</code>是对<code>netfilter</code>的参数配置，具体可以参照Linux内核文档</p><p><img src="'+g+`" alt="image-20230808180325857"></p><h3 id="修改内核参数的方法" tabindex="-1"><a class="header-anchor" href="#修改内核参数的方法"><span>修改内核参数的方法</span></a></h3><ol><li>使用 <code>echo value</code> 方式直接追加到文件中。 如 <code>echo &quot;1&quot; &gt; /proc/sys/net/ipv4/tcp_syn_retries</code> ，但是这种方式设备重启后，会恢复成默认值。</li><li>把参数添加到 <code>/etc/sysctl.conf</code> 中，然后执行 <code>sysctl -p</code> 使参数生效。这种方式是永久有效的。</li><li>使用<code>systcl</code>命令进行修改，例如修改SYN重传次数<code>sysctl net.ipv4.tcp_syn_retries=n</code></li></ol><h3 id="查看linux系统的统计信息" tabindex="-1"><a class="header-anchor" href="#查看linux系统的统计信息"><span>查看Linux系统的统计信息</span></a></h3><p>下面的<code>eth0</code>换成需要查看的网卡</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>sys/class/net/eth0/statistics/rx_packets 收到的数据包数量</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sys/class/net/eth0/statistics/tx_packets 传输的数据包数量</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sys/class/net/eth0/statistics/rx_bytes 接收的字节数</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sys/class/net/eth0/statistics/tx_bytes 传输的字节数</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sys/class/net/eth0/statistics/rx_dropped 收包时丢弃的数据包</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sys/class/net/eth0/statistics/tx_dropped 发包时丢弃的数据包</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Linux网卡的参数可以在<code>/sys/class/net/</code>进入对应网卡目录去查看，比如网卡的<code>MAC地址</code>，<code>速率(speed)</code>,<code>MTU</code>等等</p><p><img src="`+u+'" alt="image-20230808180343322"></p>',31)]))}const v=e(f,[["render",w]]),x=JSON.parse('{"path":"/note-book/LinuxOperaSystem/Linux%E5%86%85%E6%A0%B8%E5%AD%90%E7%B3%BB%E7%BB%9F-%E7%BD%91%E7%BB%9Cnetfilter.html","title":"Linux内核子系统-网络","lang":"zh-CN","frontmatter":{"description":"Linux内核子系统-网络 某教育内核讨论区：https://kernel.0voice.com/forum.php?mod=guide&view=newthread netfilter参数详解： https://www.kernel.org/doc/html/latest/networking/nf_conntrack-sysctl.html#pro...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux内核子系统-网络\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-19T06:16:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paper-Dragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://www.geekery.cn/note-book/LinuxOperaSystem/Linux%E5%86%85%E6%A0%B8%E5%AD%90%E7%B3%BB%E7%BB%9F-%E7%BD%91%E7%BB%9Cnetfilter.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"Linux内核子系统-网络"}],["meta",{"property":"og:description","content":"Linux内核子系统-网络 某教育内核讨论区：https://kernel.0voice.com/forum.php?mod=guide&view=newthread netfilter参数详解： https://www.kernel.org/doc/html/latest/networking/nf_conntrack-sysctl.html#pro..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-19T06:16:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-19T06:16:02.000Z"}]]},"git":{"createdTime":1691939318000,"updatedTime":1745043362000,"contributors":[{"name":"Paper-Dragon","username":"Paper-Dragon","email":"2678885646@qq.com","commits":2,"url":"https://github.com/Paper-Dragon"},{"name":"PaperDragon-SH","username":"PaperDragon-SH","email":"2678885646@qq.com","commits":2,"url":"https://github.com/PaperDragon-SH"},{"name":"PaperDragon","username":"PaperDragon","email":"2678885646@qq.com","commits":1,"url":"https://github.com/PaperDragon"}],"changelog":[{"hash":"f07b24e1f3b68c2db155398861853eb1e2c0f786","time":1745043362000,"email":"2678885646@qq.com","author":"PaperDragon","message":"清理死链"},{"hash":"136dabf2244b46d00c38d22815fd5e0f98cf900d","time":1725369466000,"email":"2678885646@qq.com","author":"Paper-Dragon","message":"Linux内核子系统-网络netfilter"},{"hash":"1b400120ce50b26af2d618d8059663b5a0a122e7","time":1711432445000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"一些空格错误"},{"hash":"19bb85d20d0a1760a146c084ff2742ef2d483bd9","time":1711093356000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"fixed some image lost in web pack progress"},{"hash":"392a519398b2e846f316619fbe831e100164de7c","time":1691939318000,"email":"2678885646@qq.com","author":"Paper-Dragon","message":"Create The Worid!"}]},"readingTime":{"minutes":11.5,"words":3449},"filePathRelative":"note-book/LinuxOperaSystem/Linux内核子系统-网络netfilter.md","excerpt":"\\n<blockquote>\\n<p>某教育内核讨论区：<a href=\\"https://kernel.0voice.com/forum.php?mod=guide&amp;view=newthread\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://kernel.0voice.com/forum.php?mod=guide&amp;view=newthread</a></p>\\n<p>netfilter参数详解： <a href=\\"https://www.kernel.org/doc/html/latest/networking/nf_conntrack-sysctl.html#proc-sys-net-netfilter-nf-conntrack-variables\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.kernel.org/doc/html/latest/networking/nf_conntrack-sysctl.html#proc-sys-net-netfilter-nf-conntrack-variables</a> 已经摘录部分</p>\\n<p>部分来源： <a href=\\"https://zhuanlan.zhihu.com/p/561781463\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://zhuanlan.zhihu.com/p/561781463</a></p>\\n<p>致谢： <a href=\\"https://www.zhihu.com/people/linuxwang-xian-sheng\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.zhihu.com/people/linuxwang-xian-sheng</a></p>\\n<p>源地址： <a href=\\"https://juejin.cn/post/6993124663878484005\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://juejin.cn/post/6993124663878484005</a></p>\\n</blockquote>","autoDesc":true}');export{v as comp,x as data};
