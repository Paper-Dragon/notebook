import{ah as s,ai as e,ar as i,am as n}from"./app-B9zQFkLk.js";const t="/assets/v2-cc1f3c7bd92f3a31ddf1dd29ac69eaa7_720w-3gLhtahI.png",l="/assets/v2-8657603ed9dacd971627231212e1a8ef_720w-B3y2hI8d.webp",r={};function d(p,a){return n(),e("div",null,a[0]||(a[0]=[i(`<h1 id="awk语言学习笔记01" tabindex="-1"><a class="header-anchor" href="#awk语言学习笔记01"><span>awk语言学习笔记01</span></a></h1><p><strong>awk</strong>是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。</p><h2 id="awk命令格式和选项" tabindex="-1"><a class="header-anchor" href="#awk命令格式和选项"><span>awk命令格式和选项</span></a></h2><p><strong>语法形式</strong></p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk [options] &#39;script&#39; var=value file(s)</span></span>
<span class="line"><span>awk [options] -f scriptfile var=value file(s)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用命令选项" tabindex="-1"><a class="header-anchor" href="#常用命令选项"><span><strong>常用命令选项</strong></span></a></h3><blockquote><p><strong>-F</strong> <strong>fs</strong> fs指定输入分隔符，fs可以是字符串或正则表达式，如-F: <strong>-v</strong> <strong>var=value</strong> 赋值一个用户定义变量，将外部变量传递给awk <strong>-f</strong> <strong>scripfile</strong> 从脚本文件中读取awk命令 <strong>-m[fr]</strong> <strong>val</strong> 对val值设置内在限制，-mf选项限制分配给val的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。</p></blockquote><h3 id="awk模式和操作" tabindex="-1"><a class="header-anchor" href="#awk模式和操作"><span><strong>awk模式和操作</strong></span></a></h3><p>awk脚本是由模式和操作组成的。</p><p><strong>模式可以是以下任意一个：</strong></p><ul><li>/正则表达式/：使用通配符的扩展集。</li><li>关系表达式：使用运算符进行操作，可以是字符串或数字的比较测试。</li><li>模式匹配表达式：用运算符<code>~</code>（匹配）和<code>~!</code>（不匹配）。</li><li>BEGIN语句块、pattern语句块、END语句块：参见<a href="https://www.runoob.com/w3cnote/awk-work-principle.html" target="_blank" rel="noopener noreferrer">awk的工作原理</a></li></ul><p><strong>操作由一个或多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内，主要部分是：</strong></p><ul><li>变量或数组赋值</li><li>输出命令</li><li>内置函数</li><li>控制流语句</li></ul><h3 id="awk脚本基本结构" tabindex="-1"><a class="header-anchor" href="#awk脚本基本结构"><span>awk脚本基本结构</span></a></h3><div class="language-abap line-numbers-mode" data-highlighter="shiki" data-ext="abap" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-abap"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">awk </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;NEGIN{print &quot;start&quot;} pattern{commands } END {print &quot;end&quot;}&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一个awk脚本通常由：BEGIN语句块、能够使用模式匹配的通用语句块、END语句块3部分组成，这三个部分是可选的。任意一个部分都可以不出现在脚本中，脚本通常是被<strong>单引号</strong>或<strong>双引号</strong>中，例如：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{ i = 0 } {i++ } END {print i}&#39; file </span></span>
<span class="line"><span>awk &quot;BEGIN{ i = 0 } {i++ } END {print i}&quot; file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="awk的工作原理" tabindex="-1"><a class="header-anchor" href="#awk的工作原理"><span>awk的工作原理</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{ commands } pattern{ commands } END{ commands }&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>第一步：执行<code>BEGIN{ commands }</code>语句块中的语句；</li><li>第二步：从文件或标准输入(stdin)读取一行，然后执行<code>pattern{ commands }</code>语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕。</li><li>第三步：当读至输入流末尾时，执行<code>END{ commands }</code>语句块。</li></ul><blockquote><p><strong>BEGIN语句块</strong>在awk开始从输入流中读取行<strong>之前</strong>被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在BEGIN语句块中。 <strong>END语句块</strong>在awk从输入流中读取完所有的行<strong>之后</strong>即被执行，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成，它也是一个可选语句块。 <strong>pattern语句块</strong>中的通用命令是最重要的部分，它也是可选的。如果没有提供pattern语句块，则默认执行<code>{ print }</code>，即打印每一个读取到的行，awk读取的每一行都会执行该语句块。</p></blockquote><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>echo -e &quot;A line lnA line 2&quot; | awk &#39;BEGIN{print &quot;start&quot;} {print} END {print &quot;End&quot;}&#39; </span></span>
<span class="line"><span>start</span></span>
<span class="line"><span>A line lnA line 2</span></span>
<span class="line"><span>End</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+`" alt="img"></p><p>当使用不带参数的<code>print</code>时，它就打印当前行，当<code>print</code>的参数是以逗号进行分隔时，打印时则以空格作为定界符。在awk的print语句块中双引号是被当作拼接符使用，例如：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>echo | awk &#39;{ var1=&quot;v1&quot;; var2=&quot;v2&quot;; var3=&quot;v3&quot;; print var1,var2,var3; }&#39; </span></span>
<span class="line"><span>v1 v2 v3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>双引号拼接使用：</strong></p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>echo | awk &#39;{ var1=&quot;v1&quot;; var2=&quot;v2&quot;; var3=&quot;v3&quot;; print var1&quot;=&quot;var2&quot;=&quot;var3; }&#39;</span></span>
<span class="line"><span>v1=v2=v3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>{ }类似一个循环体，会对文件中的每一行进行迭代，通常变量初始化语句（如：i=0）以及打印文件头部的语句放入BEGIN语句块中，将打印的结果等语句放在END语句块中。</p><h3 id="awk内置变量-预定义变量" tabindex="-1"><a class="header-anchor" href="#awk内置变量-预定义变量"><span>awk内置变量（预定义变量）</span></a></h3><blockquote><p>[A][N][P][G]表示第一个支持变量的工具，[A]=awk、[N]=nawk、[P]=POSIXawk、[G]=gawk</p></blockquote><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>$n 当前记录的第n个字段，比如n为1表示第一个字段，n为2表示第二个字段。 </span></span>
<span class="line"><span>$0 这个变量包含执行过程中当前行的文本内容。</span></span>
<span class="line"><span>[N] ARGC 命令行参数的数目。</span></span>
<span class="line"><span>[G] ARGIND 命令行中当前文件的位置（从0开始算）。</span></span>
<span class="line"><span>[N] ARGV 包含命令行参数的数组。</span></span>
<span class="line"><span>[G] CONVFMT 数字转换格式（默认值为%.6g）。</span></span>
<span class="line"><span>[P] ENVIRON 环境变量关联数组。</span></span>
<span class="line"><span>[N] ERRNO 最后一个系统错误的描述。</span></span>
<span class="line"><span>[G] FIELDWIDTHS 字段宽度列表（用空格键分隔）。</span></span>
<span class="line"><span>[A] FILENAME 当前输入文件的名。</span></span>
<span class="line"><span>[P] FNR 同NR，但相对于当前文件。</span></span>
<span class="line"><span>[A] FS 字段分隔符（默认是任何空格）。</span></span>
<span class="line"><span>[G] IGNORECASE 如果为真，则进行忽略大小写的匹配。</span></span>
<span class="line"><span>[A] NF 表示字段数，在执行过程中对应于当前的字段数。</span></span>
<span class="line"><span>[A] NR 表示记录数，在执行过程中对应于当前的行号。</span></span>
<span class="line"><span>[A] OFMT 数字的输出格式（默认值是%.6g）。</span></span>
<span class="line"><span>[A] OFS 输出字段分隔符（默认值是一个空格）。</span></span>
<span class="line"><span>[A] ORS 输出记录分隔符（默认值是一个换行符）。</span></span>
<span class="line"><span>[A] RS 记录分隔符（默认是一个换行符）。</span></span>
<span class="line"><span>[N] RSTART 由match函数所匹配的字符串的第一个位置。</span></span>
<span class="line"><span>[N] RLENGTH 由match函数所匹配的字符串的长度。</span></span>
<span class="line"><span>[N] SUBSEP 数组下标分隔符（默认值是34）。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>echo -e &quot;line1 f2 f3nline2 f4 f5nline3 f6 f7&quot; | awk &#39;{print &quot;Line No:&quot;NR&quot;, No of fields:&quot;NF, &quot;$0=&quot;$0, &quot;$1=&quot;$1, &quot;$2=&quot;$2, &quot;$3=&quot;$3}&#39; </span></span>
<span class="line"><span>Line No:1, No of fields:3 $0=line1 f2 f3 $1=line1 $2=f2 $3=f3</span></span>
<span class="line"><span>Line No:2, No of fields:3 $0=line2 f4 f5 $1=line2 $2=f4 $3=f5</span></span>
<span class="line"><span>Line No:3, No of fields:3 $0=line3 f6 f7 $1=line3 $2=f6 $3=f7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>print $NF</code>可以打印出一行中的最后一个字段，使用<code>$(NF-1)</code>则是打印倒数第二个字段，其他以此类推：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>echo -e &quot;line1 f2 f3n line2 f4 f5&quot; | awk &#39;{print $NF}&#39;</span></span>
<span class="line"><span>f3</span></span>
<span class="line"><span>f5</span></span>
<span class="line"><span></span></span>
<span class="line"><span>echo -e &quot;line1 f2 f3n line2 f4 f5&quot; | awk &#39;{print $(NF-1)}&#39;</span></span>
<span class="line"><span>f2</span></span>
<span class="line"><span>f4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印每一行的第二和第三个字段：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;{ print $2,$3 }&#39; filename</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>统计文件中的行数：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;END{ print NR }&#39; filename</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以上命令只使用了END语句块，在读入每一行的时，awk会将NR更新为对应的行号，当到达最后一行NR的值就是最后一行的行号，所以END语句块中的NR就是文件的行数。</p><p>一个每一行中第一个字段值累加的例子：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>seq 5 | awk &#39;BEGIN{ sum=0; print &quot;总和：&quot; } { print $1&quot;+&quot;; sum+=$1 } END{ print &quot;等于&quot;; print sum }&#39; </span></span>
<span class="line"><span>总和：</span></span>
<span class="line"><span>1+</span></span>
<span class="line"><span>2+</span></span>
<span class="line"><span>3+</span></span>
<span class="line"><span>4+</span></span>
<span class="line"><span>5+</span></span>
<span class="line"><span>等于</span></span>
<span class="line"><span>15</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="将外部变量值传递给awk" tabindex="-1"><a class="header-anchor" href="#将外部变量值传递给awk"><span>将外部变量值传递给awk</span></a></h3><p>借助**<code>-v</code>选项**，可以将外部值（并非来自stdin）传递给awk：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>VAR=10000</span></span>
<span class="line"><span>echo | awk -v VARIABLE=$VAR &#39;{ print VARIABLE }&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种传递外部变量方法：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>var1=&quot;aaa&quot;</span></span>
<span class="line"><span>var2=&quot;bbb&quot;</span></span>
<span class="line"><span>echo | awk &#39;{ print v1,v2 }&#39; v1=$var1 v2=$var2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当输入来自于文件时使用：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;{ print v1,v2 }&#39; v1=$var1 v2=$var2 filename</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以上方法中，变量之间用空格分隔作为awk的命令行参数跟随在BEGIN、{}和END语句块之后。</p><hr><h3 id="awk运算与判断" tabindex="-1"><a class="header-anchor" href="#awk运算与判断"><span>awk运算与判断</span></a></h3><p>作为一种程序设计语言所应具有的特点之一，awk支持多种运算，这些运算与C语言提供的基本相同。awk还提供了一系列内置的运算函数（如log、sqr、cos、sin等）和一些用于对字符串进行操作（运算）的函数（如length、substr等等）。这些函数的引用大大的提高了awk的运算功能。作为对条件转移指令的一部分，关系判断是每种程序设计语言都具备的功能，awk也不例外，awk中允许进行多种测试，作为样式匹配，还提供了模式匹配表达式~（匹配）和~!（不匹配）。作为对测试的一种扩充，awk也支持用逻辑运算符。</p><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+ -</td><td>加，减</td></tr><tr><td>* / &amp;</td><td>乘，除与求余</td></tr><tr><td>+ - !</td><td>一元加，减和逻辑非</td></tr><tr><td>^ ***</td><td>求幂</td></tr><tr><td>++ --</td><td>增加或减少，作为前缀或后缀</td></tr></tbody></table><p>例：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{a=&quot;b&quot;;print a++,++a;}&#39;</span></span>
<span class="line"><span>0 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：所有用作算术运算符进行操作，操作数自动转为数值，所有非数值都变为0</p><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>= += -= *= /= %= ^= **=</td><td>赋值语句</td></tr></tbody></table><p>例：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>a+=5; 等价于：a=a+5; 其它同类</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>||</td><td>逻辑或</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td></tr></tbody></table><p>例：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{a=1;b=2;print (a&gt;5 &amp;&amp; b&lt;=2),(a&gt;5 || b&lt;=2);}&#39;</span></span>
<span class="line"><span>0 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正则运算符" tabindex="-1"><a class="header-anchor" href="#正则运算符"><span>正则运算符</span></a></h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>~ ~!</td><td>匹配正则表达式和不匹配正则表达式</td></tr></tbody></table><p>例：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{a=&quot;100testa&quot;;if(a ~ /^100*/){print &quot;ok&quot;;}}&#39;</span></span>
<span class="line"><span>ok</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&lt; &lt;= &gt; &gt;= != ==</td><td>关系运算符</td></tr></tbody></table><p>例：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{a=11;if(a &gt;= 9){print &quot;ok&quot;;}}&#39;</span></span>
<span class="line"><span>ok</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：&gt; &lt; 可以作为字符串比较，也可以用作数值比较，关键看操作数如果是字符串就会转换为字符串比较。两个都为数字才转为数值比较。字符串比较：按照ASCII码顺序比较。</p><h3 id="其它运算符" tabindex="-1"><a class="header-anchor" href="#其它运算符"><span>其它运算符</span></a></h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>$</td><td>字段引用</td></tr><tr><td>空格</td><td>字符串连接符</td></tr><tr><td>?:</td><td>C条件表达式</td></tr><tr><td>in</td><td>数组中是否存在某键值</td></tr></tbody></table><p>例：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{a=&quot;b&quot;;print a==&quot;b&quot;?&quot;ok&quot;:&quot;err&quot;;}&#39;</span></span>
<span class="line"><span>ok</span></span>
<span class="line"><span>awk &#39;BEGIN{a=&quot;b&quot;;arr[0]=&quot;b&quot;;arr[1]=&quot;c&quot;;print (a in arr);}&#39;</span></span>
<span class="line"><span>0</span></span>
<span class="line"><span>awk &#39;BEGIN{a=&quot;b&quot;;arr[0]=&quot;b&quot;;arr[&quot;b&quot;]=&quot;c&quot;;print (a in arr);}&#39;</span></span>
<span class="line"><span>1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运算级优先级表" tabindex="-1"><a class="header-anchor" href="#运算级优先级表"><span>运算级优先级表</span></a></h3><p><img src="`+l+'" alt="img"></p><hr><p>持续更新！！！</p>',82)]))}const c=s(r,[["render",d]]),h=JSON.parse(`{"path":"/note-book/Linux%E4%B8%89%E5%89%91%E5%AE%A2/Gawk/awk%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001.html","title":"awk语言学习笔记01","lang":"zh-CN","frontmatter":{"description":"awk语言学习笔记01 awk是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"awk语言学习笔记01\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-19T02:07:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paper-Dragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://www.geekery.cn/note-book/Linux%E4%B8%89%E5%89%91%E5%AE%A2/Gawk/awk%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"awk语言学习笔记01"}],["meta",{"property":"og:description","content":"awk语言学习笔记01 awk是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-19T02:07:47.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-19T02:07:47.000Z"}]]},"git":{"createdTime":1691939318000,"updatedTime":1734574067000,"contributors":[{"name":"Paper-Dragon","username":"Paper-Dragon","email":"2678885646@qq.com","commits":1,"url":"https://github.com/Paper-Dragon"},{"name":"PaperDragon-SH","username":"PaperDragon-SH","email":"2678885646@qq.com","commits":4,"url":"https://github.com/PaperDragon-SH"},{"name":"PaperDragon-Bot","username":"PaperDragon-Bot","email":"2678885646@qq.com","commits":1,"url":"https://github.com/PaperDragon-Bot"}],"changelog":[{"hash":"066e6d34381c9d958c71c3d057af0c9111aa6cdb","time":1734574067000,"email":"2678885646@qq.com","author":"PaperDragon-Bot","message":"update  CTS Scripts , add manual build documents"},{"hash":"b1df1de0f82c85fe7f9afc5937f0b8af9255a5dc","time":1711355396000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"修正Markdown语法错误"},{"hash":"19bb85d20d0a1760a146c084ff2742ef2d483bd9","time":1711093356000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"fixed some image lost in web pack progress"},{"hash":"4dc3f471bd7834191f2c210ac6535b23224a8452","time":1710833914000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"awk"},{"hash":"59f93f47613439a10abfb7060f7de655983c7fb9","time":1706147919000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"fixed url encode conflict with wordcloud error"},{"hash":"392a519398b2e846f316619fbe831e100164de7c","time":1691939318000,"email":"2678885646@qq.com","author":"Paper-Dragon","message":"Create The Worid!"}]},"readingTime":{"minutes":8.26,"words":2477},"filePathRelative":"note-book/Linux三剑客/Gawk/awk语言学习笔记01.md","excerpt":"\\n<p><strong>awk</strong>是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。</p>\\n<h2>awk命令格式和选项</h2>\\n<p><strong>语法形式</strong></p>\\n<div class=\\"language-text line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"text\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-text\\"><span class=\\"line\\"><span>awk [options] 'script' var=value file(s)</span></span>\\n<span class=\\"line\\"><span>awk [options] -f scriptfile var=value file(s)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{c as comp,h as data};
