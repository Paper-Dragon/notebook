import{ah as n,ai as e,aj as t,ap as a,am as r}from"./app-B6j_W3Vs.js";const i="/assets/paging_example-PsKPCJDa.png",p={};function c(g,o){return r(),e("div",null,o[0]||(o[0]=[t("h1",{id:"_18-introduction-to-paging-分页介绍",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_18-introduction-to-paging-分页介绍"},[t("span",null,"18 Introduction to Paging 分页介绍")])],-1),t("p",null,[t("strong",null,"概述:"),t("br"),a(" 前面说到的分段管理空闲空间的方式是非常灵活方便的,但同时也容易造成内存碎片问题. 采用内存分页,则可以解决这个问题. 分页是把内存分成很多固定大小(一般比较小)的分片. 通过分片组合来分配内存,可有效降低内存碎片化的问题. 但同时也会带来运行速度慢,分页映射表(即页表)占用内存过大的问题.为了记录地址空间的每个虚拟页放在物理内存中的位置，操作系统为每个进程保存一个数据结构，称为页表（page table),用于虚拟地址到真实地址的转化,因为每个进程都有一个页表管理,所以所有进程的页表加起来会占用不少的内存,接下来的两章节会介绍怎么解决这方面的问题. "),t("img",{src:i,alt:""})],-1)]))}const l=n(p,[["render",c]]),d=JSON.parse('{"path":"/ostep-note/1%20virtualization/18%20Introduction%20to%20Paging.html","title":"18 Introduction to Paging 分页介绍","lang":"zh-CN","frontmatter":{"description":"18 Introduction to Paging 分页介绍 概述: 前面说到的分段管理空闲空间的方式是非常灵活方便的,但同时也容易造成内存碎片问题. 采用内存分页,则可以解决这个问题. 分页是把内存分成很多固定大小(一般比较小)的分片. 通过分片组合来分配内存,可有效降低内存碎片化的问题. 但同时也会带来运行速度慢,分页映射表(即页表)占用内存过大的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"18 Introduction to Paging 分页介绍\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paper-Dragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://www.geekery.cn/ostep-note/1%20virtualization/18%20Introduction%20to%20Paging.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"18 Introduction to Paging 分页介绍"}],["meta",{"property":"og:description","content":"18 Introduction to Paging 分页介绍 概述: 前面说到的分段管理空闲空间的方式是非常灵活方便的,但同时也容易造成内存碎片问题. 采用内存分页,则可以解决这个问题. 分页是把内存分成很多固定大小(一般比较小)的分片. 通过分片组合来分配内存,可有效降低内存碎片化的问题. 但同时也会带来运行速度慢,分页映射表(即页表)占用内存过大的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":0.87,"words":260},"filePathRelative":"ostep-note/1 virtualization/18 Introduction to Paging.md","excerpt":"\\n<p><strong>概述:</strong><br>\\n前面说到的分段管理空闲空间的方式是非常灵活方便的,但同时也容易造成内存碎片问题. 采用内存分页,则可以解决这个问题. 分页是把内存分成很多固定大小(一般比较小)的分片. 通过分片组合来分配内存,可有效降低内存碎片化的问题. 但同时也会带来运行速度慢,分页映射表(即页表)占用内存过大的问题.为了记录地址空间的每个虚拟页放在物理内存中的位置，操作系统为每个进程保存一个数据结构，称为页表（page table),用于虚拟地址到真实地址的转化,因为每个进程都有一个页表管理,所以所有进程的页表加起来会占用不少的内存,接下来的两章节会介绍怎么解决这方面的问题.\\n</p>","autoDesc":true}');export{l as comp,d as data};
