import{ah as o,ai as t,ar as n,am as c}from"./app-DjLPpgXq.js";const a={};function r(u,e){return c(),t("div",null,e[0]||(e[0]=[n('<h1 id="ubuntu的系统防火墙ufw和docker并存端口策略无效bug" tabindex="-1"><a class="header-anchor" href="#ubuntu的系统防火墙ufw和docker并存端口策略无效bug"><span>Ubuntu的系统防火墙ufw和docker并存端口策略无效bug</span></a></h1><blockquote><p>UFW 是 Ubuntu 上很流行的一个 iptables 前端，可以非常方便的管理防火墙的规则。但是当安装了 Docker，UFW 无法管理 Docker 发布出来的端口了。</p></blockquote><h2 id="具体现象" tabindex="-1"><a class="header-anchor" href="#具体现象"><span>具体现象</span></a></h2><ul><li><p>在一个对外提供服务的服务器上启用了 UFW，并且默认阻止所有未被允许的传入连接。</p></li><li><p>运行了一个 Docker 容器，并且使用 <code>-p</code> 选项来把该容器的某个端口发布到服务器的所有 IP 地址上。</p><p>比如：<code>docker run -d --name nginx -p 8080:80 nginx</code> 将会运行一个 nginx服务，并且将容器的 <code>80</code> 端口发布到服务器的 <code>8080</code> 端口上。UFW 将不会阻止所有对 <code>8080</code> 端口访问的请求，用命令 <code>ufw deny 8080</code> 也无法阻止外部访问这个端口。</p></li></ul><p>这个问题其实挺严重的，这说明本来只是为了在内部提供服务的一个端口被暴露在公共网络上。</p><h2 id="解决这个问题" tabindex="-1"><a class="header-anchor" href="#解决这个问题"><span>解决这个问题</span></a></h2><blockquote><p>我们希望能够通过系统防火墙通过<code>ufw allow 8080</code>，来控制docker的流量的允许或者不允许通过</p></blockquote><p>:TODO</p><p>没解决，还没找到无痛解决方案。</p>',9)]))}const p=o(a,[["render",r]]),i=JSON.parse('{"path":"/note-book/OperaSystems/Ubuntu/Ubuntu%E7%9A%84%E7%B3%BB%E7%BB%9F%E9%98%B2%E7%81%AB%E5%A2%99ufw%E5%92%8Cdocker%E5%B9%B6%E5%AD%98%E7%AB%AF%E5%8F%A3%E7%AD%96%E7%95%A5%E6%97%A0%E6%95%88bug.html","title":"Ubuntu的系统防火墙ufw和docker并存端口策略无效bug","lang":"zh-CN","frontmatter":{"description":"Ubuntu的系统防火墙ufw和docker并存端口策略无效bug UFW 是 Ubuntu 上很流行的一个 iptables 前端，可以非常方便的管理防火墙的规则。但是当安装了 Docker，UFW 无法管理 Docker 发布出来的端口了。 具体现象 在一个对外提供服务的服务器上启用了 UFW，并且默认阻止所有未被允许的传入连接。 运行了一个 Do...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Ubuntu的系统防火墙ufw和docker并存端口策略无效bug\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-25T08:29:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paper-Dragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://www.geekery.cn/note-book/OperaSystems/Ubuntu/Ubuntu%E7%9A%84%E7%B3%BB%E7%BB%9F%E9%98%B2%E7%81%AB%E5%A2%99ufw%E5%92%8Cdocker%E5%B9%B6%E5%AD%98%E7%AB%AF%E5%8F%A3%E7%AD%96%E7%95%A5%E6%97%A0%E6%95%88bug.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"Ubuntu的系统防火墙ufw和docker并存端口策略无效bug"}],["meta",{"property":"og:description","content":"Ubuntu的系统防火墙ufw和docker并存端口策略无效bug UFW 是 Ubuntu 上很流行的一个 iptables 前端，可以非常方便的管理防火墙的规则。但是当安装了 Docker，UFW 无法管理 Docker 发布出来的端口了。 具体现象 在一个对外提供服务的服务器上启用了 UFW，并且默认阻止所有未被允许的传入连接。 运行了一个 Do..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T08:29:56.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T08:29:56.000Z"}]]},"git":{"createdTime":1705981020000,"updatedTime":1711355396000,"contributors":[{"name":"PaperDragon-SH","username":"PaperDragon-SH","email":"2678885646@qq.com","commits":2,"url":"https://github.com/PaperDragon-SH"}],"changelog":[{"hash":"b1df1de0f82c85fe7f9afc5937f0b8af9255a5dc","time":1711355396000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"修正Markdown语法错误"},{"hash":"33d5bbc79ec43599bdeecfc996938decbef6d329","time":1705981020000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"add ufw halt with docker"}]},"readingTime":{"minutes":1.05,"words":316},"filePathRelative":"note-book/OperaSystems/Ubuntu/Ubuntu的系统防火墙ufw和docker并存端口策略无效bug.md","excerpt":"\\n<blockquote>\\n<p>UFW 是 Ubuntu 上很流行的一个 iptables 前端，可以非常方便的管理防火墙的规则。但是当安装了 Docker，UFW 无法管理 Docker 发布出来的端口了。</p>\\n</blockquote>\\n<h2>具体现象</h2>\\n<ul>\\n<li>\\n<p>在一个对外提供服务的服务器上启用了 UFW，并且默认阻止所有未被允许的传入连接。</p>\\n</li>\\n<li>\\n<p>运行了一个 Docker 容器，并且使用 <code>-p</code> 选项来把该容器的某个端口发布到服务器的所有 IP 地址上。</p>\\n<p>比如：<code>docker run -d --name nginx -p 8080:80 nginx</code> 将会运行一个 nginx服务，并且将容器的 <code>80</code> 端口发布到服务器的 <code>8080</code> 端口上。UFW 将不会阻止所有对 <code>8080</code> 端口访问的请求，用命令 <code>ufw deny 8080</code> 也无法阻止外部访问这个端口。</p>\\n</li>\\n</ul>","autoDesc":true}');export{p as comp,i as data};
