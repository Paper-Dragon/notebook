import{ah as a,ai as n,ar as e,am as i}from"./app-CIgVqGNV.js";const t={};function l(p,s){return i(),n("div",null,s[0]||(s[0]=[e(`<h1 id="awk高级输出02" tabindex="-1"><a class="header-anchor" href="#awk高级输出02"><span>awk高级输出02</span></a></h1><h2 id="awk高级输入输出-读取下一条记录" tabindex="-1"><a class="header-anchor" href="#awk高级输入输出-读取下一条记录"><span>awk高级输入输出 读取下一条记录</span></a></h2><p>awk中<code>next</code>语句使用：在循环逐行匹配，如果遇到next，就会跳过当前行，直接忽略下面语句。而进行下一行匹配。net语句一般用于多行合并：</p><div class="language-abap line-numbers-mode" data-highlighter="shiki" data-ext="abap" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-abap"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cat </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.txt</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">c</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">awk </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;NR%2==1{next}{print NR,$0;}&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.txt</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当记录行号除以2余1，就跳过当前行。下面的<code>print NR,$0</code>也不会执行。下一行开始，程序有开始判断<code>NR%2</code>值。这个时候记录行号是<code>：2</code>，就会执行下面语句块：<code>&#39;print NR,$0&#39;</code></p><p>分析发现需要将包含有“web”行进行跳过，然后需要将内容与下面行合并为一行：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>at text.txt</span></span>
<span class="line"><span>web01[192.168.2.100]</span></span>
<span class="line"><span>httpd            ok</span></span>
<span class="line"><span>tomcat               ok</span></span>
<span class="line"><span>sendmail               ok</span></span>
<span class="line"><span>web02[192.168.2.101]</span></span>
<span class="line"><span>httpd            ok</span></span>
<span class="line"><span>postfix               ok</span></span>
<span class="line"><span>web03[192.168.2.102]</span></span>
<span class="line"><span>mysqld            ok</span></span>
<span class="line"><span>httpd               ok</span></span>
<span class="line"><span>0</span></span>
<span class="line"><span>awk &#39;/^web/{T=$0;next;}{print T&quot;:t&quot;$0;}&#39; test.txt</span></span>
<span class="line"><span>web01[192.168.2.100]:   httpd            ok</span></span>
<span class="line"><span>web01[192.168.2.100]:   tomcat               ok</span></span>
<span class="line"><span>web01[192.168.2.100]:   sendmail               ok</span></span>
<span class="line"><span>web02[192.168.2.101]:   httpd            ok</span></span>
<span class="line"><span>web02[192.168.2.101]:   postfix               ok</span></span>
<span class="line"><span>web03[192.168.2.102]:   mysqld            ok</span></span>
<span class="line"><span>web03[192.168.2.102]:   httpd               ok</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="简单地读取一条记录" tabindex="-1"><a class="header-anchor" href="#简单地读取一条记录"><span>简单地读取一条记录</span></a></h3><p><code>awk getline</code>用法：输出重定向需用到<code>getline函数</code>。getline从标准输入、管道或者当前正在处理的文件之外的其他输入文件获得输入。它负责从输入获得下一行的内容，并给NF,NR和FNR等内建变量赋值。如果得到一条记录，getline函数返回1，如果到达文件的末尾就返回0，如果出现错误，例如打开文件失败，就返回-1。</p><p>getline语法：getline var，变量var包含了特定行的内容。</p><p>awk getline从整体上来说，用法说明：</p><ul><li>**当其左右无重定向符<code>|</code>或<code>&lt;</code>时：**getline作用于当前文件，读入当前文件的第一行给其后跟的变量<code>var</code>或<code>$0</code>（无变量），应该注意到，由于awk在处理getline之前已经读入了一行，所以getline得到的返回结果是隔行的。</li><li>**当其左右有重定向符<code>|</code>或<code>&lt;</code>时：**getline则作用于定向输入文件，由于该文件是刚打开，并没有被awk读入一行，只是getline读入，那么getline返回的是该文件的第一行，而不是隔行。</li></ul><p><strong>示例：</strong></p><p>执行linux的<code>date</code>命令，并通过管道输出给<code>getline</code>，然后再把输出赋值给自定义变量out，并打印它：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{ &quot;date&quot; | getline out; print out }&#39; test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行shell的date命令，并通过管道输出给getline，然后getline从管道中读取并将输入赋值给out，split函数把变量out转化成数组mon，然后打印数组mon的第二个元素：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{ &quot;date&quot; | getline out; split(out,mon); print mon[2] }&#39; test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令ls的输出传递给geline作为输入，循环使getline从ls的输出中读取一行，并把它打印到屏幕。这里没有输入文件，因为BEGIN块在打开输入文件前执行，所以可以忽略输入文件。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{ while( &quot;ls&quot; | getline) print }&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="关闭文件" tabindex="-1"><a class="header-anchor" href="#关闭文件"><span>关闭文件</span></a></h3><p>awk中允许在程序中关闭一个输入或输出文件，方法是使用awk的close语句。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>close(&quot;filename&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>filename可以是getline打开的文件，也可以是stdin，包含文件名的变量或者getline使用的确切命令。或一个输出文件，可以是stdout，包含文件名的变量或使用管道的确切命令。</p><h3 id="输出到一个文件" tabindex="-1"><a class="header-anchor" href="#输出到一个文件"><span>输出到一个文件</span></a></h3><p>awk中允许用如下方式将结果输出到一个文件：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>echo | awk &#39;{printf(&quot;hello word!n&quot;) &gt; &quot;datafile&quot;}&#39;</span></span>
<span class="line"><span>或</span></span>
<span class="line"><span>echo | awk &#39;{printf(&quot;hello word!n&quot;) &gt;&gt; &quot;datafile&quot;}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="设置字段定界符" tabindex="-1"><a class="header-anchor" href="#设置字段定界符"><span>设置字段定界符</span></a></h2><p>默认的字段定界符是空格，可以使用<code>-F &quot;定界符&quot;</code> 明确指定一个定界符：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk -F: &#39;{ print $NF }&#39; /etc/passwd</span></span>
<span class="line"><span>或</span></span>
<span class="line"><span>awk &#39;BEGIN{ FS=&quot;:&quot; } { print $NF }&#39; /etc/passwd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在<code>BEGIN语句块</code>中则可以用<code>OFS=“定界符”</code>设置输出字段的定界符。</p><h2 id="流程控制语句" tabindex="-1"><a class="header-anchor" href="#流程控制语句"><span>流程控制语句</span></a></h2><p>在linux awk的while、do-while和for语句中允许使用break,continue语句来控制流程走向，也允许使用exit这样的语句来退出。break中断当前正在执行的循环并跳到循环外执行下一条语句。if 是流程选择用法。awk中，流程控制语句，语法结构，与c语言类型。有了这些语句，其实很多shell程序都可以交给awk，而且性能是非常快的。下面是各个语句用法。</p><h3 id="条件判断语句" tabindex="-1"><a class="header-anchor" href="#条件判断语句"><span>条件判断语句</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>if(表达式)</span></span>
<span class="line"><span>  语句1</span></span>
<span class="line"><span>else</span></span>
<span class="line"><span>  语句2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>格式中语句1可以是多个语句，为了方便判断和阅读，最好将多个语句用{}括起来。awk分枝结构允许嵌套，其格式为：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>if(表达式)</span></span>
<span class="line"><span>  {语句1}</span></span>
<span class="line"><span>else if(表达式)</span></span>
<span class="line"><span>  {语句2}</span></span>
<span class="line"><span>else</span></span>
<span class="line"><span>  {语句3}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{</span></span>
<span class="line"><span>test=100;</span></span>
<span class="line"><span>if(test&gt;90){</span></span>
<span class="line"><span>  print &quot;very good&quot;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  else if(test&gt;60){</span></span>
<span class="line"><span>    print &quot;good&quot;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  else{</span></span>
<span class="line"><span>    print &quot;no pass&quot;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>very good</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>每条命令语句后面可以用<code>;</code><strong>分号</strong>结尾。</p><h3 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句"><span>循环语句</span></a></h3><h3 id="while语句" tabindex="-1"><a class="header-anchor" href="#while语句"><span>while语句</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>while(表达式)</span></span>
<span class="line"><span>  {语句}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{</span></span>
<span class="line"><span>test=100;</span></span>
<span class="line"><span>total=0;</span></span>
<span class="line"><span>while(i&lt;=test){</span></span>
<span class="line"><span>  total+=i;</span></span>
<span class="line"><span>  i++;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>print total;</span></span>
<span class="line"><span>}&#39;</span></span>
<span class="line"><span>5050</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环"><span>for循环</span></a></h3><p>for循环有两种格式：</p><p>格式1：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>for(变量 in 数组)</span></span>
<span class="line"><span>  {语句}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{</span></span>
<span class="line"><span>for (k in ENVIRON) {</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}&#39;</span></span>
<span class="line"><span>TERM=linux</span></span>
<span class="line"><span>G_BROKEN_FILENAMES=1</span></span>
<span class="line"><span>SHLVL=1</span></span>
<span class="line"><span>pwd=/root/text</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>logname=root</span></span>
<span class="line"><span>HOME=/root</span></span>
<span class="line"><span>SSH_CLIENT=192.168.1.21 53087 22</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注：ENVIRON是awk常量，是子典型数组。</p><p>格式2：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>for(变量;条件;表达式)</span></span>
<span class="line"><span>  {语句}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{</span></span>
<span class="line"><span>total=0;</span></span>
<span class="line"><span>for(i=0;i&lt;=100;i++){</span></span>
<span class="line"><span>  total+=i;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>print total;</span></span>
<span class="line"><span>}&#39;</span></span>
<span class="line"><span>5050</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="do循环" tabindex="-1"><a class="header-anchor" href="#do循环"><span>do循环</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>do</span></span>
<span class="line"><span>{语句} while(条件)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例子：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{ </span></span>
<span class="line"><span>total=0;</span></span>
<span class="line"><span>i=0;</span></span>
<span class="line"><span>do {total+=i;i++;} while(i&lt;=100)</span></span>
<span class="line"><span>  print total;</span></span>
<span class="line"><span>}&#39;</span></span>
<span class="line"><span>5050</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="其他语句" tabindex="-1"><a class="header-anchor" href="#其他语句"><span>其他语句</span></a></h3><ul><li><strong>break</strong> 当 break 语句用于 while 或 for 语句时，导致退出程序循环。</li><li><strong>continue</strong> 当 continue 语句用于 while 或 for 语句时，使程序循环移动到下一个迭代。</li><li><strong>next</strong> 能能够导致读入下一个输入行，并返回到脚本的顶部。这可以避免对当前输入行执行其他的操作过程。</li><li><strong>exit</strong> 语句使主输入循环退出并将控制转移到END,如果END存在的话。如果没有定义END规则，或在END中应用exit语句，则终止脚本的执行。</li></ul><h2 id="数组应用" tabindex="-1"><a class="header-anchor" href="#数组应用"><span>数组应用</span></a></h2><p>数组是awk的灵魂，处理文本中最不能少的就是它的数组处理。因为数组索引（下标）可以是数字和字符串在awk中数组叫做关联数组(associative arrays)。awk 中的数组不必提前声明，也不必声明大小。数组元素用0或空字符串来初始化，这根据上下文而定。</p><h3 id="数组的定义" tabindex="-1"><a class="header-anchor" href="#数组的定义"><span>数组的定义</span></a></h3><p>数字做数组索引（下标）：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>Array[1]=&quot;sun&quot;</span></span>
<span class="line"><span>Array[2]=&quot;kai&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>字符串做数组索引（下标）：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>Array[&quot;first&quot;]=&quot;www&quot;</span></span>
<span class="line"><span>Array[&quot;last&quot;]=&quot;name&quot;</span></span>
<span class="line"><span>Array[&quot;birth&quot;]=&quot;1987&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用中<code>print Array[1]</code>会打印出sun；使用<code>print Array[2]</code>会打印出kai；使用<code>print[&quot;birth&quot;]</code>会得到1987。</p><p><strong>读取数组的值</strong></p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>{ for(item in array) {print array[item]}; }       #输出的顺序是随机的</span></span>
<span class="line"><span>{ for(i=1;i&lt;=len;i++) {print array[i]}; }         #Len是数组的长度</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="数组相关函数" tabindex="-1"><a class="header-anchor" href="#数组相关函数"><span>数组相关函数</span></a></h3><p><strong>得到数组长度：</strong></p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{info=&quot;it is a test&quot;;lens=split(info,tA,&quot; &quot;);print length(tA),lens;}&#39;</span></span>
<span class="line"><span>4 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>length返回字符串以及数组长度，split进行分割字符串为数组，也会返回分割得到数组长度。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{info=&quot;it is a test&quot;;split(info,tA,&quot; &quot;);print asort(tA);}&#39;</span></span>
<span class="line"><span>4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>asort对数组进行排序，返回数组长度。</p><p><strong>输出数组内容（无序，有序输出）：</strong></p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{info=&quot;it is a test&quot;;split(info,tA,&quot; &quot;);for(k in tA){print k,tA[k];}}&#39;</span></span>
<span class="line"><span>4 test</span></span>
<span class="line"><span>1 it</span></span>
<span class="line"><span>2 is</span></span>
<span class="line"><span>3 a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>for…in</code>输出，因为数组是关联数组，默认是无序的。所以通过<code>for…in</code>得到是无序的数组。如果需要得到有序数组，需要通过下标获得。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>awk &#39;BEGIN{info=&quot;it is a test&quot;;tlen=split(info,tA,&quot; &quot;);for(k=1;k&lt;=tlen;k++){print k,tA[k];}}&#39;</span></span>
<span class="line"><span>1 it</span></span>
<span class="line"><span>2 is</span></span>
<span class="line"><span>3 a</span></span>
<span class="line"><span>4 test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意：数组下标是从1开始，与C数组不一样。****</p>`,82)]))}const d=a(t,[["render",l]]),h=JSON.parse(`{"path":"/note-book/Linux%E4%B8%89%E5%89%91%E5%AE%A2/Gawk/awk%E9%AB%98%E7%BA%A7%E8%BE%93%E5%87%BA02.html","title":"awk高级输出02","lang":"zh-CN","frontmatter":{"description":"awk高级输出02 awk高级输入输出 读取下一条记录 awk中next语句使用：在循环逐行匹配，如果遇到next，就会跳过当前行，直接忽略下面语句。而进行下一行匹配。net语句一般用于多行合并： 当记录行号除以2余1，就跳过当前行。下面的print NR,$0也不会执行。下一行开始，程序有开始判断NR%2值。这个时候记录行号是：2，就会执行下面语句块...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"awk高级输出02\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-11T02:13:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paper-Dragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://www.geekery.cn/note-book/Linux%E4%B8%89%E5%89%91%E5%AE%A2/Gawk/awk%E9%AB%98%E7%BA%A7%E8%BE%93%E5%87%BA02.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"awk高级输出02"}],["meta",{"property":"og:description","content":"awk高级输出02 awk高级输入输出 读取下一条记录 awk中next语句使用：在循环逐行匹配，如果遇到next，就会跳过当前行，直接忽略下面语句。而进行下一行匹配。net语句一般用于多行合并： 当记录行号除以2余1，就跳过当前行。下面的print NR,$0也不会执行。下一行开始，程序有开始判断NR%2值。这个时候记录行号是：2，就会执行下面语句块..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-11T02:13:31.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-11T02:13:31.000Z"}]]},"git":{"createdTime":1691939318000,"updatedTime":1744337611000,"contributors":[{"name":"Paper-Dragon","username":"Paper-Dragon","email":"2678885646@qq.com","commits":2,"url":"https://github.com/Paper-Dragon"},{"name":"PaperDragon-SH","username":"PaperDragon-SH","email":"2678885646@qq.com","commits":3,"url":"https://github.com/PaperDragon-SH"}],"changelog":[{"hash":"4f5d306b7085d639c6ebe401af5124eac0f820e0","time":1744337611000,"email":"2678885646@qq.com","author":"Paper-Dragon","message":"Firefox密码提取"},{"hash":"1b400120ce50b26af2d618d8059663b5a0a122e7","time":1711432445000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"一些空格错误"},{"hash":"b1df1de0f82c85fe7f9afc5937f0b8af9255a5dc","time":1711355396000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"修正Markdown语法错误"},{"hash":"4dc3f471bd7834191f2c210ac6535b23224a8452","time":1710833914000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"awk"},{"hash":"392a519398b2e846f316619fbe831e100164de7c","time":1691939318000,"email":"2678885646@qq.com","author":"Paper-Dragon","message":"Create The Worid!"}]},"readingTime":{"minutes":6.52,"words":1956},"filePathRelative":"note-book/Linux三剑客/Gawk/awk高级输出02.md","excerpt":"\\n<h2>awk高级输入输出 读取下一条记录</h2>\\n<p>awk中<code>next</code>语句使用：在循环逐行匹配，如果遇到next，就会跳过当前行，直接忽略下面语句。而进行下一行匹配。net语句一般用于多行合并：</p>\\n<div class=\\"language-abap line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"abap\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-abap\\"><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">cat </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">text</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.txt</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">a</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">b</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">c</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">d</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">e</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">awk </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'NR%2==1{next}{print NR,$0;}'</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> text</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.txt</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">2</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> b</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">4</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\\"> d</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{d as comp,h as data};
