import{ah as s,ai as a,ar as t,am as e}from"./app-kC3ZiMLt.js";const n={};function h(r,i){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="在x86-64上构建和运行多种架构的docker容器" tabindex="-1"><a class="header-anchor" href="#在x86-64上构建和运行多种架构的docker容器"><span>在x86-64上构建和运行多种架构的Docker容器</span></a></h1><blockquote><p>支持Docker Desktop 和 Linux Docker CE</p></blockquote><h2 id="配置多架构构建环境" tabindex="-1"><a class="header-anchor" href="#配置多架构构建环境"><span>配置多架构构建环境</span></a></h2><h3 id="安装cpu指令集模拟平台" tabindex="-1"><a class="header-anchor" href="#安装cpu指令集模拟平台"><span>安装CPU指令集模拟平台</span></a></h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><table><thead><tr><th>名称</th><th>功能描述</th><th>作用</th><th>关联场景或示例</th></tr></thead><tbody><tr><td><strong>qemu-user-static</strong></td><td>跨架构指令集仿真器</td><td>在x86架构主机上直接运行/编译其他CPU架构（如ARM、PPC、MIPS等）的二进制文件和容器镜像</td><td>- 在x86宿主机编译、运行ARM架构的Docker镜像<br>- 容器多架构（multi-arch）支持</td></tr><tr><td><strong>binfmt-support</strong></td><td>二进制格式解析器框架</td><td>通过内核的<code>binfmt_misc</code>机制，将非本机架构的二进制文件执行请求转发给用户空间工具（如qemu-user-static）</td><td>- 注册qemu-user-static为其他架构二进制文件的解释器<br>- 系统识别并执行非本机架构的可执行文件</td></tr></tbody></table></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --privileged</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> multiarch/qemu-user-static</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --reset</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="安装新版cpu指令集模拟平台" tabindex="-1"><a class="header-anchor" href="#安装新版cpu指令集模拟平台"><span>安装新版CPU指令集模拟平台</span></a></h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>使用老版本的模拟器在arm64下出现sudo无法使用的问题，使用新版本可以使用。</p></div><p><a href="https://github.com/tonistiigi/binfmt" target="_blank" rel="noopener noreferrer">https://github.com/tonistiigi/binfmt</a></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --privileged</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tonistiigi/binfmt</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> all</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> linux/arm64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alpine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uname</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> linux/arm/v7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alpine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uname</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> linux/ppc64le</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alpine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uname</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> linux/s390x</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alpine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uname</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> linux/riscv64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alpine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uname</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建项目" tabindex="-1"><a class="header-anchor" href="#构建项目"><span>构建项目</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> linux/arm64</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sherpa-restful-api:1.0.0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --load</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多种架构同时构建" tabindex="-1"><a class="header-anchor" href="#多种架构同时构建"><span>多种架构同时构建</span></a></h2><p>构建镜像并上传到镜像仓库，可以同时构建x86_64及ARM等多种版本的镜像</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> \${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">TAG</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> linux/amd64,linux/arm64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --push</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,17)]))}const k=s(n,[["render",h]]),p=JSON.parse('{"path":"/note-book/Docker/%E5%9C%A8x86-64%E4%B8%8A%E6%9E%84%E5%BB%BA%E5%92%8C%E8%BF%90%E8%A1%8C%E5%A4%9A%E7%A7%8D%E6%9E%B6%E6%9E%84%E7%9A%84Docker%E5%AE%B9%E5%99%A8.html","title":"在x86-64上构建和运行多种架构的Docker容器","lang":"zh-CN","frontmatter":{"description":"在x86-64上构建和运行多种架构的Docker容器 支持Docker Desktop 和 Linux Docker CE 配置多架构构建环境 安装CPU指令集模拟平台 相关信息 安装新版CPU指令集模拟平台 相关信息 使用老版本的模拟器在arm64下出现sudo无法使用的问题，使用新版本可以使用。 https://github.com/tonisti...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在x86-64上构建和运行多种架构的Docker容器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-17T02:12:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paper-Dragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://www.geekery.cn/note-book/Docker/%E5%9C%A8x86-64%E4%B8%8A%E6%9E%84%E5%BB%BA%E5%92%8C%E8%BF%90%E8%A1%8C%E5%A4%9A%E7%A7%8D%E6%9E%B6%E6%9E%84%E7%9A%84Docker%E5%AE%B9%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"在x86-64上构建和运行多种架构的Docker容器"}],["meta",{"property":"og:description","content":"在x86-64上构建和运行多种架构的Docker容器 支持Docker Desktop 和 Linux Docker CE 配置多架构构建环境 安装CPU指令集模拟平台 相关信息 安装新版CPU指令集模拟平台 相关信息 使用老版本的模拟器在arm64下出现sudo无法使用的问题，使用新版本可以使用。 https://github.com/tonisti..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-17T02:12:35.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-17T02:12:35.000Z"}]]},"git":{"createdTime":1744855955000,"updatedTime":1744855955000,"contributors":[{"name":"PaperDragon-Bot","username":"PaperDragon-Bot","email":"2678885646@qq.com","commits":1,"url":"https://github.com/PaperDragon-Bot"}],"changelog":[{"hash":"83e6f68c5c625be3266b4dd6674ea3fa750969e1","time":1744855955000,"email":"2678885646@qq.com","author":"PaperDragon-Bot","message":"在x86-64上构建和运行多种架构的Docker容器， 合并文档 一键构建多种架构的镜像，新增binfmt新式指令模拟器"}]},"readingTime":{"minutes":1.31,"words":393},"filePathRelative":"note-book/Docker/在x86-64上构建和运行多种架构的Docker容器.md","excerpt":"\\n<blockquote>\\n<p>支持Docker Desktop 和 Linux Docker CE</p>\\n</blockquote>\\n<h2>配置多架构构建环境</h2>\\n<h3>安装CPU指令集模拟平台</h3>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<table>\\n<thead>\\n<tr>\\n<th>名称</th>\\n<th>功能描述</th>\\n<th>作用</th>\\n<th>关联场景或示例</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>qemu-user-static</strong></td>\\n<td>跨架构指令集仿真器</td>\\n<td>在x86架构主机上直接运行/编译其他CPU架构（如ARM、PPC、MIPS等）的二进制文件和容器镜像</td>\\n<td>- 在x86宿主机编译、运行ARM架构的Docker镜像<br>- 容器多架构（multi-arch）支持</td>\\n</tr>\\n<tr>\\n<td><strong>binfmt-support</strong></td>\\n<td>二进制格式解析器框架</td>\\n<td>通过内核的<code>binfmt_misc</code>机制，将非本机架构的二进制文件执行请求转发给用户空间工具（如qemu-user-static）</td>\\n<td>- 注册qemu-user-static为其他架构二进制文件的解释器<br>- 系统识别并执行非本机架构的可执行文件</td>\\n</tr>\\n</tbody>\\n</table>\\n</div>","autoDesc":true}');export{k as comp,p as data};
