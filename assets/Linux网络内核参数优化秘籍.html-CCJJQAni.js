import{a as e,c as a,g as n,o as i}from"./app-BrldQKfq.js";const t="/assets/v2-297f6fe81e1ea208fea052ca150a830f_720w-CQLluV5h.jpg",p="/assets/v2-9985f5823cae9859d6f29c9e5f464f44_720w-B0rBRWrB.jpg",l="/assets/v2-a4d525f1412d67409f357cc7a3e0edb1_720w-CuVq-qYG.jpg",r="/assets/v2-b8b266361e11bc2bee8206d731916bab_720w-BgMOMaoI.jpg",c="/assets/v2-d4d52a1ee9903b66cb2bc5e35645639c_720w-DKGzBIrf.jpg",d="/assets/v2-eb4689d49e7086bfee56f379954f5e05_720w-gDkIbCHM.jpg",o="/assets/image-20220810093351946-nzIN3hyr.png",g="/assets/image-20220810093438357-MLg7BOqe.png",h="/assets/image-20220810093451723-CsasCGdn.png",m="/assets/v2-41b9ff6fd8e7ebff6d56b0e636277948_720w-QKcfn7PP.jpg",v="/assets/v2-9e48f1be828543c7e2acccb6c0d72613_720w-B5GN5xoS.jpg",b="/assets/v2-39dfa34eb5be7d90dc78714b70fd40a8_720w-BkyKl2q1.jpg",u="/assets/image-20220810093921100-Dj7dB1sC.png",_="/assets/image-20220810093937504-DZ4zn5s0.png",k="/assets/image-20220810093956701-B00bL4sU.png",x="/assets/image-20220810094017377-BKq-u-_K.png",f="/assets/image-20220810094036777-S6Py9mjZ.png",y="/assets/image-20220810094136968-Eb7_2-Ea.png",A="/assets/image-20220810094811708-n57comto.png",w="/assets/image-20220810142226624-BsabZMuk.png",F="/assets/image-20220810142257364-Cw_I0UlD.png",C="/assets/image-20220810142328226-IiN3vnmF.png",T="/assets/image-20220810142404803-CB_PHrMM.png",P="/assets/image-20220810142459960-DrBZReBu.png",B="/assets/image-20220810142713963-BEo2trRf.png",E="/assets/v2-01c194da9836dbe64b42c976e9abdb98_720w-DGZ8i4vG.jpg",q="/assets/v2-7317e5ec702ff99ff68c9e68c9c64700_720w-D8Enmb-i.jpg",L="/assets/image-20220810142932507-Dfrk9qEU.png",D={};function I(S,s){return i(),a("div",null,[...s[0]||(s[0]=[n('<h1 id="超全linux网络内核参数优化秘籍" tabindex="-1"><a class="header-anchor" href="#超全linux网络内核参数优化秘籍"><span>超全Linux网络内核参数优化秘籍</span></a></h1><p>最近很多使用Linux系统的小伙伴在后台提问，老师呀，我好烦恼！</p><p><strong>你说企业服务器在进行网络通讯过程中，为了避免网络性能瓶颈对网络通讯的影响，我该如何对系统内核中网络参数进行优化调整从而提高网络的安全性和并发性！</strong></p><p><strong>具体来说是这样的要求：</strong></p><ul><li>**提高安全性：**避免恶意的网络攻击行为对系统网络资源造成影响；</li><li>**提高并发性：**使服务器设备可以承载更多的客户端主机的访问；</li></ul><p>从而提升网络性能，增加服务器中网络服务的稳定性与高效性。</p><p><strong>今天就带大家一次看个透，记住下面这句话！</strong></p><blockquote><p><strong>对系统网络性能做优化其实最根本的目的，就是保证服务端在各种条件情况下能更加稳定的运行，处理相关网络业务。</strong></p></blockquote><h2 id="三次握手过程状态变化" tabindex="-1"><a class="header-anchor" href="#三次握手过程状态变化"><span>三次握手过程状态变化</span></a></h2><p><img src="'+t+'" alt="img"></p><h3 id="过程一-第一次握手" tabindex="-1"><a class="header-anchor" href="#过程一-第一次握手"><span>过程一：第一次握手</span></a></h3><p>客户端主机向服务端主机发送建立TCP连接的请求报文</p><p><strong>握手后的状态变化：</strong></p><p><img src="'+p+'" alt="img"></p><blockquote><p>socket就是网络连接的信息，会包含协议信息 源IP地址 源端口 目标IP地址 目标端口信息--五元组概念</p></blockquote><p><strong>握手后的状态变化：</strong></p><p><img src="'+l+'" alt="img"></p><h3 id="过程二-第二次握手" tabindex="-1"><a class="header-anchor" href="#过程二-第二次握手"><span>过程二：第二次握手</span></a></h3><p>服务端主机向客户端主机发送的TCP连接的请求报文</p><p><strong>握手后的状态变化：</strong></p><p><img src="'+r+'" alt="img"></p><h3 id="过程三-第三次握手" tabindex="-1"><a class="header-anchor" href="#过程三-第三次握手"><span>过程三：第三次握手</span></a></h3><p>客户端主机收到服务端主机发送的TCP报文回复信息后，会再次发送确认的TCP报文信息。</p><p><strong>握手后的状态变化：</strong></p><p><img src="'+c+'" alt="img"></p><p>至此三次握手过程结束，作为建立连接的客户端和响应连接的服务端，总共出现5种状态的变迁，分别总结为：</p><ul><li>**客户端主机：**closed-&gt;syn_sent-&gt;established</li><li>**服务端主机：**closed-&gt;listen-&gt;syn_rcvd-&gt;established</li></ul><h2 id="四次挥手过程状态变化" tabindex="-1"><a class="header-anchor" href="#四次挥手过程状态变化"><span>四次挥手过程状态变化</span></a></h2><h3 id="过程一-第一次挥手" tabindex="-1"><a class="header-anchor" href="#过程一-第一次挥手"><span>过程一：第一次挥手</span></a></h3><p>客户端主机向服务端主机发送断开TCP连接请求的报文。</p><p><strong>挥手后的状态变化：</strong></p><p><img src="'+d+'" alt="img"></p><h3 id="过程二-第二次挥手" tabindex="-1"><a class="header-anchor" href="#过程二-第二次挥手"><span>过程二：第二次挥手</span></a></h3><p>服务端主机会回复客户端主机发送的TCP断开请求报文。</p><p><strong>挥手后的状态变化：</strong></p><p><img src="'+o+'" alt="image-20220810093351946"></p><h3 id="过程三-第三次挥手" tabindex="-1"><a class="header-anchor" href="#过程三-第三次挥手"><span>过程三：第三次挥手</span></a></h3><p>服务端主机在回复完客户端主机的TCP断开请求确认控制字段后，不会马上就进行TCP连接的断开；</p><p>服务端主机会先确保断开前，所有传输到客户端主机的数据是否已经传输完毕，再向客户端主机发送断开连接的TCP报文；</p><p><strong>挥手后的状态变化：</strong></p><p><img src="'+g+'" alt="image-20220810093438357"></p><h3 id="过程四-第四次挥手" tabindex="-1"><a class="header-anchor" href="#过程四-第四次挥手"><span>过程四：第四次挥手</span></a></h3><p>客户端主机收到服务端主机的TCP断开请求后，会回复服务端主机的断开请求，发送最后一次的TCP确认报文</p><p><strong>挥手后的状态变化：</strong></p><p><img src="'+h+'" alt="image-20220810093451723"></p><p>至此四次握手过程结束，作为连接断开的客户端和响应断开连接的服务端，总共出现5种状态的变迁，分别总结为：</p><ul><li>**客户端主机：**established-&gt;fin_wait1-&gt;fin_wait2-&gt;time_wait-&gt;closed</li><li>**服务端主机：**established-&gt;closed_wait-&gt;last_ack-&gt;closed</li></ul><h2 id="特殊情况-三次挥手过程状态变化" tabindex="-1"><a class="header-anchor" href="#特殊情况-三次挥手过程状态变化"><span>特殊情况：三次挥手过程状态变化</span></a></h2><p><img src="'+m+'" alt="img"></p><h3 id="过程一-第一次挥手-1" tabindex="-1"><a class="header-anchor" href="#过程一-第一次挥手-1"><span>过程一：第一次挥手</span></a></h3><p>客户端主机向服务端主机发送断开TCP连接请求的报文。</p><p><strong>挥手后的状态变化：</strong></p><p><img src="'+v+'" alt="img"></p><h3 id="过程二-第二次挥手-1" tabindex="-1"><a class="header-anchor" href="#过程二-第二次挥手-1"><span>过程二：第二次挥手</span></a></h3><p>服务端主机会回复客户端主机发送的TCP断开请求报文。</p><p><strong>挥手后的状态变化：</strong></p><p><img src="'+b+'" alt="img"></p><h3 id="过程三-第三次挥手-1" tabindex="-1"><a class="header-anchor" href="#过程三-第三次挥手-1"><span>过程三：第三次挥手</span></a></h3><p>客户端主机收到服务端主机的TCP断开请求后，会回复服务端主机的断开请求，发送最后一次的TCP确认报文</p><p><img src="'+u+'" alt="image-20220810093921100"></p><p>利用抓包工具抓取三次挥手过程：</p><p><img src="'+_+'" alt="image-20220810093937504"></p><p>至此三次握手过程结束，作为连接断开的客户端和响应断开连接的服务端，总共出现5种状态的变迁，分别总结为：</p><ul><li>**客户端主机：**established-&gt;fin_wait1-&gt;closing-&gt;time_wait-&gt;closed</li><li>**服务端主机：**established-&gt;closed_wait-&gt;last_ack-&gt;closed</li></ul><p>整体从连接建立到连接断开的三次握手和四次挥手过程中，总共出现了十一种状态的变迁：</p><p><img src="'+k+'" alt="image-20220810093956701"></p><p>所谓Linux服务器内核参数优化，主要是指在Linux系统中针对业务服务应用而进行的系统内核参数调整，优化并无一定的标准；</p><p>下面以生产环境下Linux常见的网络资源的内核优化为例进行说明。</p><p><img src="'+x+'" alt="image-20220810094017377"></p><h2 id="优化参数-net-ipv4-tcp-fin-timeout" tabindex="-1"><a class="header-anchor" href="#优化参数-net-ipv4-tcp-fin-timeout"><span><strong>优化参数：net.ipv4.tcp_fin_timeout</strong></span></a></h2><p>作用简述：表示套接字有本端要求关闭，这个参数决定了它保持在FIN_WAIT_2状态的时间，默认值是60s</p><p><img src="'+f+`" alt="image-20220810094036777"></p><p>默认配置：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># cat /proc/sys/net/ipv4/tcp_fin_timeout </span></span>
<span class="line"><span>60</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化参数-net-ipv4-tcp-tw-reuse" tabindex="-1"><a class="header-anchor" href="#优化参数-net-ipv4-tcp-tw-reuse"><span>优化参数：<strong>net.ipv4.tcp_tw_reuse</strong></span></a></h2><p>作用简述：表示开启重用，允许将TIME_WAIT sockets重新用于新的TCP连接，默认值为0，表示关闭</p><p><img src="`+y+`" alt="image-20220810094136968"></p><p>默认配置：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># cat /proc/sys/net/ipv4/tcp_tw_reuse    </span></span>
<span class="line"><span>0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化参数-net-ipv4-tcp-tw-recycle" tabindex="-1"><a class="header-anchor" href="#优化参数-net-ipv4-tcp-tw-recycle"><span>优化参数：<strong>net.ipv4.tcp_tw_recycle</strong></span></a></h2><p>作用简述：表示开启TCP连接中TIME_WAIT sockets的快速回收机制，默认为0表示关闭。</p><p>当开启了这个配置后，TIME_WAIT不用再等待2MSL的时间进行释放连接;</p><p>而是一个RTO（retransmission timeout，数据包重传的timeout时间）的时间，远小于2MSL时间长度。</p><p><img src="`+A+`" alt="image-20220810094811708"></p><p>默认配置：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># cat /proc/sys/net/ipv4/tcp_tw_recycle </span></span>
<span class="line"><span>0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>reusers和recycle这两个参数都是为防止生产环境下web squid等业务服务器产生time_wait网络状态数量过多设置的。</p></blockquote><h2 id="优化参数-net-ipv4-tcp-keepalive-time" tabindex="-1"><a class="header-anchor" href="#优化参数-net-ipv4-tcp-keepalive-time"><span><strong>优化参数：net.ipv4.tcp_keepalive_time</strong></span></a></h2><p>作用简述：表示当keepalived启用时，TCP发送Keepalive消息的频度。默认是2小时，建议改为10分钟</p><p><img src="`+w+`" alt="image-20220810142226624"></p><p>默认配置：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># cat /proc/sys/net/ipv4/tcp_keepalive_time </span></span>
<span class="line"><span>7200</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化参数-net-ipv4-ip-local-port-range" tabindex="-1"><a class="header-anchor" href="#优化参数-net-ipv4-ip-local-port-range"><span>优化参数：<strong>net.ipv4.ip_local_port_range</strong></span></a></h2><p>作用简述：该选项用来设定允许系统打开的端口范围，即用于向外连接的端口范围</p><p>服务器A ---&gt; 服务器B</p><p><img src="`+F+`" alt="image-20220810142257364"></p><p>默认配置：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># cat /proc/sys/net/ipv4/ip_local_port_range </span></span>
<span class="line"><span>32768 60999</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化参数-net-ipv4-tcp-max-syn-backlog" tabindex="-1"><a class="header-anchor" href="#优化参数-net-ipv4-tcp-max-syn-backlog"><span>优化参数：<strong>net.ipv4.tcp_max_syn_backlog</strong></span></a></h2><p>作用简述：表示SYN队列的长度，默认为128，建议加大队列的长度为8192或更多，这样可以容纳更多等待连接的网络连接数；</p><p>该参数为服务器端用于记录那些尚未收到客户端确认信息的连接请求最大值。</p><p><img src="`+C+`" alt="image-20220810142328226"></p><p>默认配置：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># cat /proc/sys/net/ipv4/tcp_max_syn_backlog </span></span>
<span class="line"><span>128</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化参数-net-ipv4-tcp-max-tw-buckets" tabindex="-1"><a class="header-anchor" href="#优化参数-net-ipv4-tcp-max-tw-buckets"><span>优化参数：<strong>net.ipv4.tcp_max_tw_buckets</strong></span></a></h2><p>作用简述：表示系统同时保持TIME_WAIT套接字的最大数量，如果超过这个数值，TIME_WAIT套接字将立刻被清除并打印警告信息。</p><p>默认为180000（早期系统版本），对于apache nginx等服务器来说可以将其调低一点，如果改为5000~30000；</p><p>不同业务的服务器也可以给大一点，比如LVS squid可以将其调高一点。</p><p><img src="`+T+`" alt="image-20220810142404803"></p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># cat /proc/sys/net/ipv4/tcp_max_tw_buckets  </span></span>
<span class="line"><span>4096</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化参数-net-ipv4-tcp-syn-retries" tabindex="-1"><a class="header-anchor" href="#优化参数-net-ipv4-tcp-syn-retries"><span>优化参数：<strong>net.ipv4.tcp_syn_retries</strong></span></a></h2><p>作用简述：表示在内核放弃建立连接之前发送SYN包的数量，默认值是6次；</p><p><img src="`+P+`" alt="image-20220810142459960"></p><p>默认配置：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># cat /proc/sys/net/ipv4/tcp_syn_retries    </span></span>
<span class="line"><span>6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化参数-net-ipv4-tcp-synack-retries" tabindex="-1"><a class="header-anchor" href="#优化参数-net-ipv4-tcp-synack-retries"><span>优化参数：<strong>net.ipv4.tcp_synack_retries</strong></span></a></h2><p>作用简述：参数值决定了内核放弃连接之前发送SYN+ACK包的数量，默认值为5。</p><p><img src="`+B+`" alt="image-20220810142713963"></p><p>默认配置：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># cat /proc/sys/net/ipv4/tcp_synack_retries </span></span>
<span class="line"><span>5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化参数-net-ipv4-tcp-max-orphans" tabindex="-1"><a class="header-anchor" href="#优化参数-net-ipv4-tcp-max-orphans"><span>优化参数：<strong>net.ipv4.tcp_max_orphans</strong></span></a></h2><p>作用简述：用于设定系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上（系统所能处理不属于任何进程的TCP套接字最大数量）；</p><p>被动建立端发送了SYN+ACK后状态转为SYN_RCVD，这时TCP连接就不属于某个进程了；</p><p>如果超过这个数值，孤立连接将立即被复位并打印出警告信息；主要是为了抵御简单的DoS攻击，早期系统默认是 65536；</p><p>建议不能过分依靠这个限制缩减这个参数值，更多的情况是增加这个值。</p><p><img src="`+E+`" alt="img"></p><p>默认配置：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># cat /proc/sys/net/ipv4/tcp_max_orphans </span></span>
<span class="line"><span>4096</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化参数-net-core-somaxconn" tabindex="-1"><a class="header-anchor" href="#优化参数-net-core-somaxconn"><span>优化参数：<strong>net.core.somaxconn</strong></span></a></h2><p><img src="`+q+`" alt="img"></p><p>默认配置：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># cat /proc/sys/net/core/somaxconn  </span></span>
<span class="line"><span>128</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化参数-net-core-netdev-max-backlog" tabindex="-1"><a class="header-anchor" href="#优化参数-net-core-netdev-max-backlog"><span>优化参数：<strong>net.core.netdev_max_backlog</strong></span></a></h2><p>作用简述：表示当每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许发送到队列的数据包最大数；</p><p><img src="`+L+`" alt="image-20220810142932507"></p><p>默认配置：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># cat /proc/sys/net/core/netdev_max_backlog </span></span>
<span class="line"><span>1000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上内核优化参数具体优化方法：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># 参数优化配置建议</span></span>
<span class="line"><span>[root@xiaoq ~]# cat /etc/sysctl.conf</span></span>
<span class="line"><span>net.ipv4.tcp_fin_timeout = 2</span></span>
<span class="line"><span>net.ipv4.tcp_tw_reuse = 1</span></span>
<span class="line"><span>net.ipv4.tcp_tw_recycle = 1</span></span>
<span class="line"><span>net.ipv4.tcp_keepalive_time = 600</span></span>
<span class="line"><span>net.ipv4.ip_local_port_range = 4000 65000</span></span>
<span class="line"><span>net.ipv4.tcp_max_syn_backlog = 16384</span></span>
<span class="line"><span>net.ipv4.tcp_max_tw_buckets = 36000</span></span>
<span class="line"><span>net.ipv4.tcp_syn_retries = 1</span></span>
<span class="line"><span>net.ipv4.tcp_synack_retries = 1</span></span>
<span class="line"><span>net.ipv4.tcp_max_orphans = 16384</span></span>
<span class="line"><span>net.core.somaxconn = 16384</span></span>
<span class="line"><span>net.core.netdev_max_backlog = 16384</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 加载内核配置信息</span></span>
<span class="line"><span>[root@xiaoq ~]# sysctl -p</span></span>
<span class="line"><span>net.ipv4.tcp_fin_timeout = 2</span></span>
<span class="line"><span>net.ipv4.tcp_tw_reuse = 1</span></span>
<span class="line"><span>net.ipv4.tcp_tw_recycle = 1</span></span>
<span class="line"><span>net.ipv4.tcp_keepalive_time = 600</span></span>
<span class="line"><span>net.ipv4.ip_local_port_range = 4000 65000</span></span>
<span class="line"><span>net.ipv4.tcp_max_syn_backlog = 16384</span></span>
<span class="line"><span>net.ipv4.tcp_max_tw_buckets = 36000</span></span>
<span class="line"><span>net.ipv4.tcp_syn_retries = 1</span></span>
<span class="line"><span>net.ipv4.tcp_synack_retries = 1</span></span>
<span class="line"><span>net.ipv4.tcp_max_orphans = 16384</span></span>
<span class="line"><span>net.core.somaxconn = 16384</span></span>
<span class="line"><span>net.core.netdev_max_backlog = 16384</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>以上配置优化信息只作为参考模板，理解优化参数作用后，需结合企业实际需求进行灵活调整。</p></blockquote><p>学习这些内容还是需要有点运维基础的学员的，如果连基础的运维知识都没掌握，这篇文章你可能看不懂，当然如果你看懂了，你的待遇基本可以定位在15k了！</p>`,141)])])}const j=e(D,[["render",I]]),N=JSON.parse('{"path":"/note-book/OperaSystems/Linux%E7%BD%91%E7%BB%9C%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96%E7%A7%98%E7%B1%8D.html","title":"超全Linux网络内核参数优化秘籍","lang":"zh-CN","frontmatter":{"description":"超全Linux网络内核参数优化秘籍 最近很多使用Linux系统的小伙伴在后台提问，老师呀，我好烦恼！ 你说企业服务器在进行网络通讯过程中，为了避免网络性能瓶颈对网络通讯的影响，我该如何对系统内核中网络参数进行优化调整从而提高网络的安全性和并发性！ 具体来说是这样的要求： **提高安全性：**避免恶意的网络攻击行为对系统网络资源造成影响； **提高并发性...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"超全Linux网络内核参数优化秘籍\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-13T15:08:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paper-Dragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://www.geekery.cn/note-book/OperaSystems/Linux%E7%BD%91%E7%BB%9C%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96%E7%A7%98%E7%B1%8D.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"超全Linux网络内核参数优化秘籍"}],["meta",{"property":"og:description","content":"超全Linux网络内核参数优化秘籍 最近很多使用Linux系统的小伙伴在后台提问，老师呀，我好烦恼！ 你说企业服务器在进行网络通讯过程中，为了避免网络性能瓶颈对网络通讯的影响，我该如何对系统内核中网络参数进行优化调整从而提高网络的安全性和并发性！ 具体来说是这样的要求： **提高安全性：**避免恶意的网络攻击行为对系统网络资源造成影响； **提高并发性..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-13T15:08:38.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-13T15:08:38.000Z"}]]},"git":{"createdTime":1691939318000,"updatedTime":1691939318000,"contributors":[{"name":"Paper-Dragon","username":"Paper-Dragon","email":"2678885646@qq.com","commits":1,"url":"https://github.com/Paper-Dragon"}],"changelog":[{"hash":"392a519398b2e846f316619fbe831e100164de7c","time":1691939318000,"email":"2678885646@qq.com","author":"Paper-Dragon","message":"Create The Worid!"}]},"readingTime":{"minutes":8.85,"words":2654},"filePathRelative":"note-book/OperaSystems/Linux网络内核参数优化秘籍.md","excerpt":"\\n<p>最近很多使用Linux系统的小伙伴在后台提问，老师呀，我好烦恼！</p>\\n<p><strong>你说企业服务器在进行网络通讯过程中，为了避免网络性能瓶颈对网络通讯的影响，我该如何对系统内核中网络参数进行优化调整从而提高网络的安全性和并发性！</strong></p>\\n<p><strong>具体来说是这样的要求：</strong></p>\\n<ul>\\n<li>**提高安全性：**避免恶意的网络攻击行为对系统网络资源造成影响；</li>\\n<li>**提高并发性：**使服务器设备可以承载更多的客户端主机的访问；</li>\\n</ul>\\n<p>从而提升网络性能，增加服务器中网络服务的稳定性与高效性。</p>","autoDesc":true}');export{j as comp,N as data};
