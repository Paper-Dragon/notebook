import{ah as s,ai as e,an as a,am as l}from"./app-BWnhILFx.js";const n={};function t(r,i){return l(),e("div",null,i[0]||(i[0]=[a(`<h1 id="什么是进程" tabindex="-1"><a class="header-anchor" href="#什么是进程"><span>什么是进程</span></a></h1><p>进程:</p><ul><li>运行中的程序的一个副本，是被载入内存的一个指令集合，是资源分配的单位</li><li>进程ID（Process ID，PID）号码被用来标记各个进程</li><li>UID、GID、和SELinux语境决定对文件系统的存取和访问权限</li><li>通常从执行进程的用户来继承</li><li>存在生命周期</li></ul><h2 id="进程创建" tabindex="-1"><a class="header-anchor" href="#进程创建"><span>进程创建</span></a></h2><ul><li>init：第一个进程，从 CentOS 7 以后为systemd</li><li>进程：都由其父进程创建，fork()，父子关系，CoW：Copy On Write​</li></ul><p>刚创建时，共用父进程的内存，有新数据像刚创建的子进程写入时，单独开辟一个内存空间，把父进程内存复制一份给子进程做数据修改 ​</p><h2 id="通过pid获取运行的真实程序" tabindex="-1"><a class="header-anchor" href="#通过pid获取运行的真实程序"><span>通过pid获取运行的真实程序</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  !!</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">面试题</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ps</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> aux</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ssh</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ll</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /prox/ssh的pid/exe</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /prox/ssh的pid/status</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="物理地址空间和虚拟地址空间" tabindex="-1"><a class="header-anchor" href="#物理地址空间和虚拟地址空间"><span>物理地址空间和虚拟地址空间</span></a></h2><ul><li><p>MMU：Memory Management Unit 负责虚拟地址转换为物理地址 程序在访问一个内存地址指向的内存时,CPU不是直接把这个地址送到内存总线上,而是被送到MMU（Memory Management Unit),然后把这个内存地址映射到实际的物理内存地址上，然后通过总线再去访问内存，程序操作的地址称为虚拟内存地址</p></li><li><p>TLB：Translation Lookaside Buffer 翻译后备缓冲器，用于保存虚拟地址和物理地址映射关系的缓存</p></li><li><p>空间分配：程序申请的内存，申请内存是一个值，内核根据他使用的空间给的是最小值，其申请的理想空间是线性空间（虚拟空间），真实分配的是物理地址中可能断续的地址</p></li></ul><h2 id="c代码和内存布局之间的对应关系" tabindex="-1"><a class="header-anchor" href="#c代码和内存布局之间的对应关系"><span>C代码和内存布局之间的对应关系</span></a></h2><p>每个进程都包括5种不同的数据段</p><ul><li>代码段：用来存放可执行文件的操作指令，也就是说是它是可执行程序在内存中的镜像。代码段需要防止在运行时被非法修改，所以只准许读取操作，而不允许写入（修改）操作——它是不可写的</li><li>数据段：用来存放可执行文件中已初始化全局变量，换句话说就是存放程序静态分配的变量和全局变量</li><li>BSS段：Block Started by Symbol”的缩写,意为“以符号开始的块，BSS段包含了程序中未初始化的全局变量，在内存中 bss段全部置零</li><li>堆（heap）：存放数组和对象，堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）</li><li>栈：栈是用户存放程序临时创建的局部变量，也就是说我们函数括弧“{}”中定义的变量（但不包括static声明的变量，static意味着在数据段中存放变量）。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。由于栈的后进先出特点，所以栈特别方便用来保存/恢复调用现场。可以把堆栈看成一个寄存、交换临时数据的内存区</li></ul><h2 id="进程使用内存问题" tabindex="-1"><a class="header-anchor" href="#进程使用内存问题"><span>进程使用内存问题</span></a></h2><ul><li><p>内存泄漏：Memory Leak 指程序中用malloc或new申请了一块内存，但是没有用free或delete将内存释放，导致这块内存一直处于占用状态</p></li><li><p>内存溢出：Memory Overflow 指程序申请了10M的空间，但是在这个空间写入10M以上字节的数据，就是溢出</p></li><li><p>内存不足：OOM Out Of Memory，“内存用完了”, 在情况在java程序中比较常见。系统会选一个进程将之杀死，在日志messages中看到类似下面的提示</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kernel:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Out</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> memory:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kill</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> process</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 9527</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (java) score 88 or sacrifice child</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当JVM因为没有足够的内存来为对象分配空间并且垃圾回收器也已经没有空间可回收时，就会抛出这个error，因为这个问题已经严重到不足以被应用处理）</p></li></ul><p>原因：</p><blockquote><p>给应用分配内存太少：比如虚拟机本身可使用的内存（一般通过启动时的VM参数指定）太少 应用用的太多，并且用完没释放，浪费了。此时就会造成内存泄露或者内存溢出</p></blockquote><p>使用的解决办法：</p><ol><li>限制java进程的max heap，并且降低java程序的worker数量，从而降低内存使用</li><li>给系统增加swap空间</li></ol><p>设置内核参数（不推荐）： 不允许内存申请过量：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/proc/sys/vm/overcommit_memory</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/proc/sys/vm/overcommit_ratio</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/proc/sys/vm/panic_on_oom</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明： 默认内存分配是申请多少就给多少（大部分用不到那么多）如果超出分的空间，就采用OOM killer机制 作用是选出一个进程来杀掉，来腾出内存空间，如果还不够就继续杀，一般占用资源越大的被杀几率越大</p><p>vm.panic_con_oom，发生oom时进行的操作设置，取值是：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0  默认值，当出现oom的时候，触发oom killer</span></span>
<span class="line"><span>1  程序在有cpuset、memory policy、memcg的约束情况下的OOM，可以考虑不panic，而是启动OOM killer。其它情况触发 kernel panic，即系统直接重启</span></span>
<span class="line"><span>2   当出现oom，直接触发kernel panic，即系统直接重启</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vm.overcommit_memory 接受三种取值:</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0   Heuristic overcommit handling. 这是缺省值，它允许overcommit，但过于明目张胆的overcommit会被拒绝，比如malloc一次性申请的内存大小就超过了系统总内存。Heuristic的意思是“试\\探式的”，内核利用某种算法猜测你的内存申请是否合理，它认为不合理就会拒绝overcommit</span></span>
<span class="line"><span>1   Always overcommit. 允许overcommit，对内存申请来者不拒。内核执行无内存过量使用处理。使用这个设置会增大内存超载的可能性，但也可以增强大量使用内存任务的性能</span></span>
<span class="line"><span>2   Don’t overcommit. 禁止overcommit。内存拒绝等于或者大于总可用swap大小以及overcommit_ratio 指定的物理 RAM比例的内存请求。如果您希望减小内存过度使用的风险，这个设置就是最好的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>申请内存的算法： 单次申请的内存大小不能超过以下值，否则本次申请就会失败</p><p>free memory + free swap + pagecache的大小 + SLAB</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kernel设有一个阈值，申请的内存总数超过这个阈值就算overcommit，在/proc/meminfo中可以看到这个阈值的大小</span></span>
<span class="line"><span>查看阀值大小：grep -i commit /proc/meminfo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>vm.overcommit_ratio</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>内核参数，缺省值是50，表示物理内存的50%。如果你不想使用比率，也可以直接指定内存的字节数大小，通过另一个内核参数 vm.overcommit_kbytes 即可；</span></span>
<span class="line"><span>如果使用了huge pages，那么需要从物理内存中减去，公式变成</span></span>
<span class="line"><span>CommitLimit = ([total RAM] – [total huge TLB RAM]) * vm.overcommit_ratio / 100 + swap</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进程状态" tabindex="-1"><a class="header-anchor" href="#进程状态"><span>进程状态</span></a></h2><p>进程更多的状态：</p><ul><li>运行态：running</li><li>就绪态：ready</li><li>睡眠态：分为两种，可中断：interruptable，不可中断：uninterruptable</li><li>停止态：stopped，暂停于内存，但不会被调度，除非手动启动</li><li>僵死态：zombie，僵尸态，结束进程，父进程结束前，子进程不关闭，杀死父进程可以关闭僵死态的子进程</li></ul><h2 id="lru算法" tabindex="-1"><a class="header-anchor" href="#lru算法"><span>LRU算法</span></a></h2><p>Least Recently Used 近期最少使用算法（喜新厌旧），释放内存</p><h2 id="ipc进程间通信" tabindex="-1"><a class="header-anchor" href="#ipc进程间通信"><span>IPC进程间通信</span></a></h2><p>IPC: Inter Process Communication</p><p>同一主机：</p><ul><li><p>pipe 管道,单向传输，1v1</p></li><li><p>socket 套接字文件</p></li><li><p>Memory-maped file 文件映射,将文件中的一段数据映射到物理内存，多个进程共享这片内存</p></li><li><p>shm shared memory 共享内存</p></li><li><p>signal 信号</p></li><li><p>Lock 对资源上锁，如果资源已被某进程锁住，则其它进程想修改甚至读取这些资源，都将被阻塞，直到锁被打开</p></li><li><p>semaphore 信号量，一种计数器</p></li></ul><p>不同主机：</p><ul><li><p>socket=IP和端口号</p></li><li><p>RPC remote procedure call</p></li><li><p>MQ消息队列，生产者和消费者，如：Kafka，RabbitMQ，ActiveMQ</p></li></ul><p>例： 创建管道文件，实现两个进程通信 1 号终端：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkfifo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> xxxx</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">xxxx</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">12345</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2号终端：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> xxxx</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  #此时能动态显示1号终端输出的内容</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="进程优先级" tabindex="-1"><a class="header-anchor" href="#进程优先级"><span>进程优先级</span></a></h2><ul><li><p>系统优先级： 0-139，数字越小，优先级越高 （CentOS 4,5），各有140个运行队列和过期队列 0-98，99（CentOS 6）</p></li><li><p>实时优先级： 0-99 静态优先级： 100-139,此对应的是nice值：-20~19 Big O： 时间（空间）复杂度，用时（空间）和规模的关系O(1), O(logn), O(n)线性, O(n^2)抛物线, O(2^n)</p></li></ul><p>进程调度机制：</p><ul><li><p>总共有280个队列</p><ul><li><p>其中140个队列对应优先级，也叫运行队列，如1号队列对应0优先级，以此类推；</p></li><li><p>另外140个队列对应优先级的过期队列，如1号过期队列是对应0优先级，以此类推。两个对应关系的队列会进行交替</p></li></ul></li></ul><p>所有的进程，按各自的优先级进入对应的运行队列，运行完后会进入过期队列，当运行队列执行完成，就会执行过期队列，此时过期队列变成运行队列，之前的运行队列变成过期队列，存放新运行完的进程</p><h2 id="io调度算法" tabindex="-1"><a class="header-anchor" href="#io调度算法"><span>IO调度算法</span></a></h2><ul><li>NOOP</li><li>Deadline scheduler</li><li>Anticipatory scheduler</li><li>CFQ</li></ul><p>查看系统IO算法：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sys/block/sda/queue/scheduler</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,55)]))}const h=s(n,[["render",t]]),d=JSON.parse('{"path":"/note-book/OperaSystems/%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%9B%E7%A8%8B.html","title":"什么是进程","lang":"zh-CN","frontmatter":{"description":"什么是进程 进程: 运行中的程序的一个副本，是被载入内存的一个指令集合，是资源分配的单位 进程ID（Process ID，PID）号码被用来标记各个进程 UID、GID、和SELinux语境决定对文件系统的存取和访问权限 通常从执行进程的用户来继承 存在生命周期 进程创建 init：第一个进程，从 CentOS 7 以后为systemd 进程：都由其父...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"什么是进程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T09:17:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paper-Dragon\\",\\"url\\":\\"https://github.com/Paper-Dragon\\",\\"email\\":\\"2678885646@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://www.geekery.cn/note-book/OperaSystems/%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%9B%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"运维开发绿皮书"}],["meta",{"property":"og:title","content":"什么是进程"}],["meta",{"property":"og:description","content":"什么是进程 进程: 运行中的程序的一个副本，是被载入内存的一个指令集合，是资源分配的单位 进程ID（Process ID，PID）号码被用来标记各个进程 UID、GID、和SELinux语境决定对文件系统的存取和访问权限 通常从执行进程的用户来继承 存在生命周期 进程创建 init：第一个进程，从 CentOS 7 以后为systemd 进程：都由其父..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T09:17:48.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T09:17:48.000Z"}]]},"git":{"createdTime":1718380423000,"updatedTime":1730452668000,"contributors":[{"name":"Paper-Dragon","username":"Paper-Dragon","email":"2678885646@qq.com","commits":1,"url":"https://github.com/Paper-Dragon"},{"name":"PaperDragon-SH","username":"PaperDragon-SH","email":"2678885646@qq.com","commits":1,"url":"https://github.com/PaperDragon-SH"}],"changelog":[{"hash":"6ab7eb83988778fac940fa21b76fbec53d5cae3c","time":1730452668000,"email":"2678885646@qq.com","author":"PaperDragon-SH","message":"optimize"},{"hash":"a03c41279a9fdc14a8212c359ef3eca464580928","time":1718380423000,"email":"2678885646@qq.com","author":"Paper-Dragon","message":"新增 get.docker.ocm download.docker.com镜像站"}]},"readingTime":{"minutes":8.19,"words":2456},"filePathRelative":"note-book/OperaSystems/什么是进程.md","excerpt":"\\n<p>进程:</p>\\n<ul>\\n<li>运行中的程序的一个副本，是被载入内存的一个指令集合，是资源分配的单位</li>\\n<li>进程ID（Process ID，PID）号码被用来标记各个进程</li>\\n<li>UID、GID、和SELinux语境决定对文件系统的存取和访问权限</li>\\n<li>通常从执行进程的用户来继承</li>\\n<li>存在生命周期</li>\\n</ul>\\n<h2>进程创建</h2>\\n<ul>\\n<li>init：第一个进程，从 CentOS 7 以后为systemd</li>\\n<li>进程：都由其父进程创建，fork()，父子关系，CoW：Copy On Write​</li>\\n</ul>","autoDesc":true}');export{h as comp,d as data};
